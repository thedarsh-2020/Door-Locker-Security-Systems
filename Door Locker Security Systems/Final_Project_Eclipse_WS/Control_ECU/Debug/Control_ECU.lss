
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000026b2  00002746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080007e  0080007e  00002764  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00002764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015f0  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000699c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008755  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_3>
      10:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_6>
      1c:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_7>
      20:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_8>
      24:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 09 	call	0x1248	; 0x1248 <main>
      8a:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_init>:
/*
 * Description :
 * Function responsible for initiate buzzer pin direction and its initial state
 */
void buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* setup pin direction as output */
	GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <GPIO_setupPinDirection>

	/* set buzzer initial state as turn it off */
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzer_on>:
/*
 * Description :
 * Function responsible for turn on buzzer
 */
void buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	64 e0       	ldi	r22, 0x04	; 4
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <buzzer_off>:
/*
 * Description :
 * Function responsible for turn off buzzer
 */
void buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <home_screen>:
/*
 * Description :
 * Function responsible for send order to HMI_ECU to display HOME SCREEN on LCD and get user selection
 */
uint8 home_screen(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	uart_rx = 0;
     ba0:	10 92 7e 00 	sts	0x007E, r1
	UART_sendByte(IAM_READY);				/* Send IAM_READY byte to HMI_ECU to ask it to send */
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
	for(;;)
	{
		uart_rx = UART_recieveByte();
     baa:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
     bae:	80 93 7e 00 	sts	0x007E, r24
		if((uart_rx == '+') || (uart_rx == '-'))
     bb2:	80 91 7e 00 	lds	r24, 0x007E
     bb6:	8b 32       	cpi	r24, 0x2B	; 43
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <home_screen+0x2a>
     bba:	80 91 7e 00 	lds	r24, 0x007E
     bbe:	8d 32       	cpi	r24, 0x2D	; 45
     bc0:	a1 f7       	brne	.-24     	; 0xbaa <home_screen+0x12>
		{
			break;
		}
	}
	return uart_rx;
     bc2:	80 91 7e 00 	lds	r24, 0x007E
}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <enter_pass>:
/*
 * Description :
 * Function responsible for getting password from user till '='
 */
void enter_pass(void)
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	uart_rx = 0;
     bd4:	10 92 7e 00 	sts	0x007E, r1
	current_password = 0;
     bd8:	10 92 80 00 	sts	0x0080, r1
     bdc:	10 92 7f 00 	sts	0x007F, r1
	UART_sendByte(IAM_READY);				/* Send IAM_READY byte to HMI_ECU to ask it to send */
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
	for(;;)
	{
		uart_rx = UART_recieveByte();
     be6:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
     bea:	80 93 7e 00 	sts	0x007E, r24
		if(uart_rx == '=')
     bee:	80 91 7e 00 	lds	r24, 0x007E
     bf2:	8d 33       	cpi	r24, 0x3D	; 61
     bf4:	c9 f0       	breq	.+50     	; 0xc28 <enter_pass+0x5c>
		{
			break;
		}
		else
		{
			current_password = (current_password * 10) + uart_rx;
     bf6:	80 91 7f 00 	lds	r24, 0x007F
     bfa:	90 91 80 00 	lds	r25, 0x0080
     bfe:	9c 01       	movw	r18, r24
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	c9 01       	movw	r24, r18
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	28 0f       	add	r18, r24
     c10:	39 1f       	adc	r19, r25
     c12:	80 91 7e 00 	lds	r24, 0x007E
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	82 0f       	add	r24, r18
     c1c:	93 1f       	adc	r25, r19
     c1e:	90 93 80 00 	sts	0x0080, r25
     c22:	80 93 7f 00 	sts	0x007F, r24
     c26:	df cf       	rjmp	.-66     	; 0xbe6 <enter_pass+0x1a>
		}
	}
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <check_pass>:
/*
 * Description :
 * Function responsible for getting password from EEPROM and check it with entered password from user
 */
uint8 check_pass(void)
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <check_pass+0x6>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <check_pass+0x8>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	uint8 temp = 0;
     c3a:	1b 82       	std	Y+3, r1	; 0x03
	uint16 i;
	check_password = 0;
     c3c:	10 92 88 00 	sts	0x0088, r1
     c40:	10 92 87 00 	sts	0x0087, r1
	for(i = eeprom_last_location; i >= eeprom_first_location; i--)
     c44:	80 91 89 00 	lds	r24, 0x0089
     c48:	90 91 8a 00 	lds	r25, 0x008A
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	24 c0       	rjmp	.+72     	; 0xc9a <check_pass+0x6c>
	{
		EEPROM_readByte(i, &temp);
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	9e 01       	movw	r18, r28
     c58:	2d 5f       	subi	r18, 0xFD	; 253
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	b9 01       	movw	r22, r18
     c5e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <EEPROM_readByte>
		check_password = (check_password * 10) + temp;
     c62:	80 91 87 00 	lds	r24, 0x0087
     c66:	90 91 88 00 	lds	r25, 0x0088
     c6a:	9c 01       	movw	r18, r24
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	c9 01       	movw	r24, r18
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	28 0f       	add	r18, r24
     c7c:	39 1f       	adc	r19, r25
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	90 93 88 00 	sts	0x0088, r25
     c8c:	80 93 87 00 	sts	0x0087, r24
uint8 check_pass(void)
{
	uint8 temp = 0;
	uint16 i;
	check_password = 0;
	for(i = eeprom_last_location; i >= eeprom_first_location; i--)
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	20 91 68 00 	lds	r18, 0x0068
     c9e:	30 91 69 00 	lds	r19, 0x0069
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	82 17       	cp	r24, r18
     ca8:	93 07       	cpc	r25, r19
     caa:	98 f6       	brcc	.-90     	; 0xc52 <check_pass+0x24>
	{
		EEPROM_readByte(i, &temp);
		check_password = (check_password * 10) + temp;
	}
	if(current_password == check_password)
     cac:	20 91 7f 00 	lds	r18, 0x007F
     cb0:	30 91 80 00 	lds	r19, 0x0080
     cb4:	80 91 87 00 	lds	r24, 0x0087
     cb8:	90 91 88 00 	lds	r25, 0x0088
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	19 f4       	brne	.+6      	; 0xcc8 <check_pass+0x9a>
	{
		return MATCH;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	8c 83       	std	Y+4, r24	; 0x04
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <check_pass+0x9c>
	}
	return NOT_MATCH;
     cc8:	1c 82       	std	Y+4, r1	; 0x04
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <create_pass>:
/*
 * Description :
 * Function responsible for getting password from user till '='
 */
void create_pass(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	uart_rx = 0;
     ce2:	10 92 7e 00 	sts	0x007E, r1
	new_password = 0;
     ce6:	10 92 82 00 	sts	0x0082, r1
     cea:	10 92 81 00 	sts	0x0081, r1
	UART_sendByte(IAM_READY);				/* Send IAM_READY byte to HMI_ECU to ask it to send */
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
	for(;;)
	{
		uart_rx = UART_recieveByte();
     cf4:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
     cf8:	80 93 7e 00 	sts	0x007E, r24
		if(uart_rx == '=')
     cfc:	80 91 7e 00 	lds	r24, 0x007E
     d00:	8d 33       	cpi	r24, 0x3D	; 61
     d02:	c9 f0       	breq	.+50     	; 0xd36 <create_pass+0x5c>
		{
			break;
		}
		else
		{
			new_password = (new_password * 10) + uart_rx;
     d04:	80 91 81 00 	lds	r24, 0x0081
     d08:	90 91 82 00 	lds	r25, 0x0082
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	c9 01       	movw	r24, r18
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	28 0f       	add	r18, r24
     d1e:	39 1f       	adc	r19, r25
     d20:	80 91 7e 00 	lds	r24, 0x007E
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	82 0f       	add	r24, r18
     d2a:	93 1f       	adc	r25, r19
     d2c:	90 93 82 00 	sts	0x0082, r25
     d30:	80 93 81 00 	sts	0x0081, r24
     d34:	df cf       	rjmp	.-66     	; 0xcf4 <create_pass+0x1a>
		}
	}
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <re_enter_pass>:
 * Description :
 * Function responsible for getting password from user till '=' and check it,
 * if it match with the password, will store in EEPROM
 */
uint8 re_enter_pass(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	uart_rx = 0;
     d46:	10 92 7e 00 	sts	0x007E, r1
	re_enter_password = 0;
     d4a:	10 92 84 00 	sts	0x0084, r1
     d4e:	10 92 83 00 	sts	0x0083, r1
	UART_sendByte(IAM_READY);					/* Send IAM_READY byte to HMI_ECU to ask it to send */
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
	for(;;)
	{
		uart_rx = UART_recieveByte();
     d58:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
     d5c:	80 93 7e 00 	sts	0x007E, r24
		if(uart_rx == '=')
     d60:	80 91 7e 00 	lds	r24, 0x007E
     d64:	8d 33       	cpi	r24, 0x3D	; 61
     d66:	c9 f0       	breq	.+50     	; 0xd9a <re_enter_pass+0x5e>
		{
			break;
		}
		else
		{
			re_enter_password = (re_enter_password * 10) + uart_rx;
     d68:	80 91 83 00 	lds	r24, 0x0083
     d6c:	90 91 84 00 	lds	r25, 0x0084
     d70:	9c 01       	movw	r18, r24
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	c9 01       	movw	r24, r18
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	28 0f       	add	r18, r24
     d82:	39 1f       	adc	r19, r25
     d84:	80 91 7e 00 	lds	r24, 0x007E
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	90 93 84 00 	sts	0x0084, r25
     d94:	80 93 83 00 	sts	0x0083, r24
     d98:	df cf       	rjmp	.-66     	; 0xd58 <re_enter_pass+0x1c>
		}
	}
	if(new_password == re_enter_password)
     d9a:	20 91 81 00 	lds	r18, 0x0081
     d9e:	30 91 82 00 	lds	r19, 0x0082
     da2:	80 91 83 00 	lds	r24, 0x0083
     da6:	90 91 84 00 	lds	r25, 0x0084
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	29 f4       	brne	.+10     	; 0xdba <re_enter_pass+0x7e>
	{
		store_pass();										/* Getting password from EEPROM to check it*/
     db0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <store_pass>
		return MATCH;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <re_enter_pass+0x80>
	}
	return NOT_MATCH;
     dba:	19 82       	std	Y+1, r1	; 0x01
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <store_pass>:
/*
 * Description :
 * Function responsible for storing password in EEPROM
 */
void store_pass(void)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	2e 97       	sbiw	r28, 0x0e	; 14
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
	eeprom_password = new_password;
     dda:	80 91 81 00 	lds	r24, 0x0081
     dde:	90 91 82 00 	lds	r25, 0x0082
     de2:	90 93 86 00 	sts	0x0086, r25
     de6:	80 93 85 00 	sts	0x0085, r24
	eeprom_last_location = eeprom_first_location;
     dea:	80 91 68 00 	lds	r24, 0x0068
     dee:	90 91 69 00 	lds	r25, 0x0069
     df2:	90 93 8a 00 	sts	0x008A, r25
     df6:	80 93 89 00 	sts	0x0089, r24
     dfa:	9b c0       	rjmp	.+310    	; 0xf32 <store_pass+0x16c>
	while(eeprom_password != 0)
	{
		EEPROM_writeByte(eeprom_last_location, (eeprom_password % 10));
     dfc:	e0 91 89 00 	lds	r30, 0x0089
     e00:	f0 91 8a 00 	lds	r31, 0x008A
     e04:	80 91 85 00 	lds	r24, 0x0085
     e08:	90 91 86 00 	lds	r25, 0x0086
     e0c:	2a e0       	ldi	r18, 0x0A	; 10
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	b9 01       	movw	r22, r18
     e12:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__udivmodhi4>
     e16:	28 2f       	mov	r18, r24
     e18:	cf 01       	movw	r24, r30
     e1a:	62 2f       	mov	r22, r18
     e1c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <EEPROM_writeByte>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e2       	ldi	r26, 0x20	; 32
     e26:	b1 e4       	ldi	r27, 0x41	; 65
     e28:	8b 87       	std	Y+11, r24	; 0x0b
     e2a:	9c 87       	std	Y+12, r25	; 0x0c
     e2c:	ad 87       	std	Y+13, r26	; 0x0d
     e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e30:	6b 85       	ldd	r22, Y+11	; 0x0b
     e32:	7c 85       	ldd	r23, Y+12	; 0x0c
     e34:	8d 85       	ldd	r24, Y+13	; 0x0d
     e36:	9e 85       	ldd	r25, Y+14	; 0x0e
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	4a e7       	ldi	r20, 0x7A	; 122
     e3e:	53 e4       	ldi	r21, 0x43	; 67
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8f 83       	std	Y+7, r24	; 0x07
     e4a:	98 87       	std	Y+8, r25	; 0x08
     e4c:	a9 87       	std	Y+9, r26	; 0x09
     e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e50:	6f 81       	ldd	r22, Y+7	; 0x07
     e52:	78 85       	ldd	r23, Y+8	; 0x08
     e54:	89 85       	ldd	r24, Y+9	; 0x09
     e56:	9a 85       	ldd	r25, Y+10	; 0x0a
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e64:	88 23       	and	r24, r24
     e66:	2c f4       	brge	.+10     	; 0xe72 <store_pass+0xac>
		__ticks = 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	3f c0       	rjmp	.+126    	; 0xef0 <store_pass+0x12a>
	else if (__tmp > 65535)
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	4f e7       	ldi	r20, 0x7F	; 127
     e80:	57 e4       	ldi	r21, 0x47	; 71
     e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e86:	18 16       	cp	r1, r24
     e88:	4c f5       	brge	.+82     	; 0xedc <store_pass+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e90:	9e 85       	ldd	r25, Y+14	; 0x0e
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e2       	ldi	r20, 0x20	; 32
     e98:	51 e4       	ldi	r21, 0x41	; 65
     e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <store_pass+0x10c>
     eb4:	89 e1       	ldi	r24, 0x19	; 25
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9c 83       	std	Y+4, r25	; 0x04
     eba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <store_pass+0xfa>
     ec4:	9c 83       	std	Y+4, r25	; 0x04
     ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	69 f7       	brne	.-38     	; 0xeb4 <store_pass+0xee>
     eda:	14 c0       	rjmp	.+40     	; 0xf04 <store_pass+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	6f 81       	ldd	r22, Y+7	; 0x07
     ede:	78 85       	ldd	r23, Y+8	; 0x08
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	9e 83       	std	Y+6, r25	; 0x06
     eee:	8d 83       	std	Y+5, r24	; 0x05
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <store_pass+0x136>
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		eeprom_last_location++;
     f04:	80 91 89 00 	lds	r24, 0x0089
     f08:	90 91 8a 00 	lds	r25, 0x008A
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	90 93 8a 00 	sts	0x008A, r25
     f12:	80 93 89 00 	sts	0x0089, r24
		eeprom_password = eeprom_password / 10;
     f16:	80 91 85 00 	lds	r24, 0x0085
     f1a:	90 91 86 00 	lds	r25, 0x0086
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	b9 01       	movw	r22, r18
     f24:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__udivmodhi4>
     f28:	cb 01       	movw	r24, r22
     f2a:	90 93 86 00 	sts	0x0086, r25
     f2e:	80 93 85 00 	sts	0x0085, r24
 */
void store_pass(void)
{
	eeprom_password = new_password;
	eeprom_last_location = eeprom_first_location;
	while(eeprom_password != 0)
     f32:	80 91 85 00 	lds	r24, 0x0085
     f36:	90 91 86 00 	lds	r25, 0x0086
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f0       	breq	.+2      	; 0xf40 <store_pass+0x17a>
     f3e:	5e cf       	rjmp	.-324    	; 0xdfc <store_pass+0x36>
		EEPROM_writeByte(eeprom_last_location, (eeprom_password % 10));
		_delay_ms(10);
		eeprom_last_location++;
		eeprom_password = eeprom_password / 10;
	}
	eeprom_last_location--;
     f40:	80 91 89 00 	lds	r24, 0x0089
     f44:	90 91 8a 00 	lds	r25, 0x008A
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	90 93 8a 00 	sts	0x008A, r25
     f4e:	80 93 89 00 	sts	0x0089, r24
}
     f52:	2e 96       	adiw	r28, 0x0e	; 14
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <create_pass_option>:
/*
 * Description :
 * Function responsible for creating password option
 */
void create_pass_option(void)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	for(;;)
	{
		UART_sendByte(CREATE_PASS);
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
		create_pass();
     f72:	0e 94 6d 06 	call	0xcda	; 0xcda <create_pass>

		UART_sendByte(RE_ENTER_PASS);
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
		if(re_enter_pass() == MATCH)
     f7c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <re_enter_pass>
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	b1 f4       	brne	.+44     	; 0xfb0 <create_pass_option+0x4c>
		{
			UART_sendByte(PASS_CREATED);
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
			Timer_Config.T_ovf_counter = 8;				/* Timer delay for 2 Second */
     f8a:	88 e0       	ldi	r24, 0x08	; 8
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 71 00 	sts	0x0071, r25
     f92:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
     f96:	8a e6       	ldi	r24, 0x6A	; 106
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
     f9e:	80 91 92 00 	lds	r24, 0x0092
     fa2:	88 23       	and	r24, r24
     fa4:	e1 f3       	breq	.-8      	; 0xf9e <create_pass_option+0x3a>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
     fa6:	10 92 92 00 	sts	0x0092, r1
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
			while(timer_finish == 0){}					/* Waiting till timer is finished */
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
		}
	}
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
			break;
		}
		else
		{
			UART_sendByte(PASS_UNMATCH);
     fb0:	86 e0       	ldi	r24, 0x06	; 6
     fb2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
			Timer_Config.T_ovf_counter = 8;				/* Timer delay for 2 Second */
     fb6:	88 e0       	ldi	r24, 0x08	; 8
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	90 93 71 00 	sts	0x0071, r25
     fbe:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
     fc2:	8a e6       	ldi	r24, 0x6A	; 106
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
     fca:	80 91 92 00 	lds	r24, 0x0092
     fce:	88 23       	and	r24, r24
     fd0:	e1 f3       	breq	.-8      	; 0xfca <create_pass_option+0x66>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
     fd2:	10 92 92 00 	sts	0x0092, r1
     fd6:	ca cf       	rjmp	.-108    	; 0xf6c <create_pass_option+0x8>

00000fd8 <open_door_option>:
/*
 * Description :
 * Function responsible for opening door option
 */
void open_door_option(void)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	for(;;)
	{
		UART_sendByte(ENTER_PASS);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
		enter_pass();
     fe6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <enter_pass>

		if(check_pass() == MATCH)
     fea:	0e 94 17 06 	call	0xc2e	; 0xc2e <check_pass>
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <open_door_option+0x1c>
     ff2:	55 c0       	rjmp	.+170    	; 0x109e <open_door_option+0xc6>
		{
			pass_counter = 0;							/* Reset counter of wrong entered password */
     ff4:	10 92 8b 00 	sts	0x008B, r1
			UART_sendByte(OPENING_DOOR);
     ff8:	88 e0       	ldi	r24, 0x08	; 8
     ffa:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
			DcMotor_Rotate(CW);							/* Turn ON DC-Motor Clock-wise to open the Door */
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <DcMotor_Rotate>
			Timer_Config.T_ovf_counter = 57;			/* Timer delay for 15 Second */
    1004:	89 e3       	ldi	r24, 0x39	; 57
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 93 71 00 	sts	0x0071, r25
    100c:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    1010:	8a e6       	ldi	r24, 0x6A	; 106
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
    1018:	80 91 92 00 	lds	r24, 0x0092
    101c:	88 23       	and	r24, r24
    101e:	e1 f3       	breq	.-8      	; 0x1018 <open_door_option+0x40>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
    1020:	10 92 92 00 	sts	0x0092, r1

			DcMotor_Rotate(STOP);						/* Stop DC-Motor */
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <DcMotor_Rotate>
			Timer_Config.T_ovf_counter = 4;				/* Timer delay for 1 Second */
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 71 00 	sts	0x0071, r25
    1032:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    1036:	8a e6       	ldi	r24, 0x6A	; 106
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
    103e:	80 91 92 00 	lds	r24, 0x0092
    1042:	88 23       	and	r24, r24
    1044:	e1 f3       	breq	.-8      	; 0x103e <open_door_option+0x66>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
    1046:	10 92 92 00 	sts	0x0092, r1

			UART_sendByte(CLOSING_DOOR);
    104a:	89 e0       	ldi	r24, 0x09	; 9
    104c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
			DcMotor_Rotate(A_CW);						/* Turn ON DC-Motor Anti-Clock-wise to close the Door */
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <DcMotor_Rotate>
			Timer_Config.T_ovf_counter = 57;			/* Timer delay for 15 Second */
    1056:	89 e3       	ldi	r24, 0x39	; 57
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	90 93 71 00 	sts	0x0071, r25
    105e:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    1062:	8a e6       	ldi	r24, 0x6A	; 106
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
    106a:	80 91 92 00 	lds	r24, 0x0092
    106e:	88 23       	and	r24, r24
    1070:	e1 f3       	breq	.-8      	; 0x106a <open_door_option+0x92>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
    1072:	10 92 92 00 	sts	0x0092, r1

			DcMotor_Rotate(STOP);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <DcMotor_Rotate>
			Timer_Config.T_ovf_counter = 4;				/* Timer delay for 1 Second */
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	90 93 71 00 	sts	0x0071, r25
    1084:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    1088:	8a e6       	ldi	r24, 0x6A	; 106
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
    1090:	80 91 92 00 	lds	r24, 0x0092
    1094:	88 23       	and	r24, r24
    1096:	e1 f3       	breq	.-8      	; 0x1090 <open_door_option+0xb8>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
    1098:	10 92 92 00 	sts	0x0092, r1
    109c:	46 c0       	rjmp	.+140    	; 0x112a <open_door_option+0x152>

			return;
		}
		else
		{
			UART_sendByte(PASS_UNMATCH);
    109e:	86 e0       	ldi	r24, 0x06	; 6
    10a0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
			Timer_Config.T_ovf_counter = 8;				/* Timer delay for 2 Second */
    10a4:	88 e0       	ldi	r24, 0x08	; 8
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	90 93 71 00 	sts	0x0071, r25
    10ac:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    10b0:	8a e6       	ldi	r24, 0x6A	; 106
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}					/* Waiting till timer is finished */
    10b8:	80 91 92 00 	lds	r24, 0x0092
    10bc:	88 23       	and	r24, r24
    10be:	e1 f3       	breq	.-8      	; 0x10b8 <open_door_option+0xe0>
			timer_finish = 0;							/* Reset timer variable after delay is finished*/
    10c0:	10 92 92 00 	sts	0x0092, r1

			pass_counter++;								/* increase counter of wrong entered password */
    10c4:	80 91 8b 00 	lds	r24, 0x008B
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 93 8b 00 	sts	0x008B, r24

			/* In case user is entered wrong password 3 times, BUZZER will ON for 1 min */
			if(pass_counter == 3)
    10ce:	80 91 8b 00 	lds	r24, 0x008B
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <open_door_option+0x100>
    10d6:	84 cf       	rjmp	.-248    	; 0xfe0 <open_door_option+0x8>
			{
				pass_counter = 0;						/* Reset counter of wrong entered password */
    10d8:	10 92 8b 00 	sts	0x008B, r1

				UART_sendByte(BUZZER_ON);
    10dc:	8a e0       	ldi	r24, 0x0A	; 10
    10de:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
				buzzer_on();							/* Turning ON Buzzer after 3 timer user entered wrong password */
    10e2:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzer_on>
				Timer_Config.T_ovf_counter = 229;		/* Timer delay for 1 Min */
    10e6:	85 ee       	ldi	r24, 0xE5	; 229
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	90 93 71 00 	sts	0x0071, r25
    10ee:	80 93 70 00 	sts	0x0070, r24
				Timer_init(&Timer_Config);				/* Timer Init-ialization with structure */
    10f2:	8a e6       	ldi	r24, 0x6A	; 106
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
				while(timer_finish == 0){}				/* Waiting till timer is finished */
    10fa:	80 91 92 00 	lds	r24, 0x0092
    10fe:	88 23       	and	r24, r24
    1100:	e1 f3       	breq	.-8      	; 0x10fa <open_door_option+0x122>
				timer_finish = 0;						/* Reset timer variable after delay is finished*/
    1102:	10 92 92 00 	sts	0x0092, r1

				buzzer_off();							/* Turning OFF Buzzer after 1 min */
    1106:	0e 94 c0 05 	call	0xb80	; 0xb80 <buzzer_off>
				Timer_Config.T_ovf_counter = 4;			/* Timer delay for 1 Second */
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 71 00 	sts	0x0071, r25
    1112:	80 93 70 00 	sts	0x0070, r24
				Timer_init(&Timer_Config);				/* Timer Init-ialization with structure */
    1116:	8a e6       	ldi	r24, 0x6A	; 106
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
				while(timer_finish == 0){}				/* Waiting till timer is finished */
    111e:	80 91 92 00 	lds	r24, 0x0092
    1122:	88 23       	and	r24, r24
    1124:	e1 f3       	breq	.-8      	; 0x111e <open_door_option+0x146>
				timer_finish = 0;						/* Reset timer variable after delay is finished*/
    1126:	10 92 92 00 	sts	0x0092, r1

				return;
			}
		}
	}
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <change_pass_option>:
/*
 * Description :
 * Function responsible for changing password option
 */
void change_pass_option(void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	for(;;)
	{
		UART_sendByte(ENTER_PASS);
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
		enter_pass();
    113e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <enter_pass>
		if(check_pass() == MATCH)
    1142:	0e 94 17 06 	call	0xc2e	; 0xc2e <check_pass>
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	b1 f5       	brne	.+108    	; 0x11b6 <change_pass_option+0x86>
		{
			pass_counter = 0;
    114a:	10 92 8b 00 	sts	0x008B, r1
			for(;;)
			{
				UART_sendByte(CREATE_PASS);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
				create_pass();
    1154:	0e 94 6d 06 	call	0xcda	; 0xcda <create_pass>

				UART_sendByte(RE_ENTER_PASS);
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
				if(re_enter_pass() == MATCH)
    115e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <re_enter_pass>
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	a1 f4       	brne	.+40     	; 0x118e <change_pass_option+0x5e>
				{
					UART_sendByte(PASS_CHANGED);
    1166:	85 e0       	ldi	r24, 0x05	; 5
    1168:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
					Timer_Config.T_ovf_counter = 8;			/* Timer delay for 2 Second */
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	90 93 71 00 	sts	0x0071, r25
    1174:	80 93 70 00 	sts	0x0070, r24
					Timer_init(&Timer_Config);				/* Timer Init-ialization with structure */
    1178:	8a e6       	ldi	r24, 0x6A	; 106
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
					while(timer_finish == 0){}				/* Waiting till timer is finished */
    1180:	80 91 92 00 	lds	r24, 0x0092
    1184:	88 23       	and	r24, r24
    1186:	e1 f3       	breq	.-8      	; 0x1180 <change_pass_option+0x50>
					timer_finish = 0;						/* Reset timer variable after delay is finished*/
    1188:	10 92 92 00 	sts	0x0092, r1
    118c:	5a c0       	rjmp	.+180    	; 0x1242 <change_pass_option+0x112>
					break;
				}
				else
				{
					UART_sendByte(PASS_UNMATCH);
    118e:	86 e0       	ldi	r24, 0x06	; 6
    1190:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
					Timer_Config.T_ovf_counter = 8;			/* Timer delay for 2 Second */
    1194:	88 e0       	ldi	r24, 0x08	; 8
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 71 00 	sts	0x0071, r25
    119c:	80 93 70 00 	sts	0x0070, r24
					Timer_init(&Timer_Config);				/* Timer Init-ialization with structure */
    11a0:	8a e6       	ldi	r24, 0x6A	; 106
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
					while(timer_finish == 0){}				/* Waiting till timer is finished */
    11a8:	80 91 92 00 	lds	r24, 0x0092
    11ac:	88 23       	and	r24, r24
    11ae:	e1 f3       	breq	.-8      	; 0x11a8 <change_pass_option+0x78>
					timer_finish = 0;						/* Reset timer variable after delay is finished*/
    11b0:	10 92 92 00 	sts	0x0092, r1
    11b4:	cc cf       	rjmp	.-104    	; 0x114e <change_pass_option+0x1e>
			return;
		}

		else
		{
			UART_sendByte(PASS_UNMATCH);
    11b6:	86 e0       	ldi	r24, 0x06	; 6
    11b8:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
			Timer_Config.T_ovf_counter = 8;					/* Timer delay for 2 Second */
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	90 93 71 00 	sts	0x0071, r25
    11c4:	80 93 70 00 	sts	0x0070, r24
			Timer_init(&Timer_Config);						/* Timer Init-ialization with structure */
    11c8:	8a e6       	ldi	r24, 0x6A	; 106
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
			while(timer_finish == 0){}						/* Waiting till timer is finished */
    11d0:	80 91 92 00 	lds	r24, 0x0092
    11d4:	88 23       	and	r24, r24
    11d6:	e1 f3       	breq	.-8      	; 0x11d0 <change_pass_option+0xa0>
			timer_finish = 0;								/* Reset timer variable after delay is finished*/
    11d8:	10 92 92 00 	sts	0x0092, r1

			pass_counter++;									/* increase counter of wrong entered password */
    11dc:	80 91 8b 00 	lds	r24, 0x008B
    11e0:	8f 5f       	subi	r24, 0xFF	; 255
    11e2:	80 93 8b 00 	sts	0x008B, r24

			/* In case user is entered wrong password 3 times, BUZZER will ON for 1 min */
			if(pass_counter == 3)
    11e6:	80 91 8b 00 	lds	r24, 0x008B
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <change_pass_option+0xc0>
    11ee:	a4 cf       	rjmp	.-184    	; 0x1138 <change_pass_option+0x8>
			{
				pass_counter = 0;							/* Reset counter of wrong entered password */
    11f0:	10 92 8b 00 	sts	0x008B, r1

				UART_sendByte(BUZZER_ON);
    11f4:	8a e0       	ldi	r24, 0x0A	; 10
    11f6:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
				buzzer_on();								/* Turning ON Buzzer after 3 timer user entered wrong password */
    11fa:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzer_on>
				Timer_Config.T_ovf_counter = 229;			/* Timer delay for 1 Min*/
    11fe:	85 ee       	ldi	r24, 0xE5	; 229
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 71 00 	sts	0x0071, r25
    1206:	80 93 70 00 	sts	0x0070, r24
				Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    120a:	8a e6       	ldi	r24, 0x6A	; 106
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
				while(timer_finish == 0){}					/* Waiting till timer is finished */
    1212:	80 91 92 00 	lds	r24, 0x0092
    1216:	88 23       	and	r24, r24
    1218:	e1 f3       	breq	.-8      	; 0x1212 <change_pass_option+0xe2>
				timer_finish = 0;							/* Reset timer variable after delay is finished*/
    121a:	10 92 92 00 	sts	0x0092, r1

				buzzer_off();								/* Turning OFF Buzzer after 1 min */
    121e:	0e 94 c0 05 	call	0xb80	; 0xb80 <buzzer_off>
				Timer_Config.T_ovf_counter = 4;				/* Timer delay for 11 Second */
    1222:	84 e0       	ldi	r24, 0x04	; 4
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	90 93 71 00 	sts	0x0071, r25
    122a:	80 93 70 00 	sts	0x0070, r24
				Timer_init(&Timer_Config);					/* Timer Init-ialization with structure */
    122e:	8a e6       	ldi	r24, 0x6A	; 106
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 3c 0b 	call	0x1678	; 0x1678 <Timer_init>
				while(timer_finish == 0){}					/* Waiting till timer is finished */
    1236:	80 91 92 00 	lds	r24, 0x0092
    123a:	88 23       	and	r24, r24
    123c:	e1 f3       	breq	.-8      	; 0x1236 <change_pass_option+0x106>
				timer_finish = 0;							/* Reset timer variable after delay is finished*/
    123e:	10 92 92 00 	sts	0x0092, r1
				return;
			}
		}
	}

}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <main>:
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/

int main(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	62 97       	sbiw	r28, 0x12	; 18
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
	 * 8 Bit Data
	 * Baud-rate = 9600 Bits/Sec.
	 * One Stop Bit
	 * Disable Parity
	 */
	UART_ConfigType UART_Config = {Bits_8, BR_9600, Stop_1_Bit, Parity_Disable};
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	9a 87       	std	Y+10, r25	; 0x0a
    1262:	89 87       	std	Y+9, r24	; 0x09
    1264:	e8 e7       	ldi	r30, 0x78	; 120
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	fc 87       	std	Y+12, r31	; 0x0c
    126a:	eb 87       	std	Y+11, r30	; 0x0b
    126c:	f5 e0       	ldi	r31, 0x05	; 5
    126e:	fd 87       	std	Y+13, r31	; 0x0d
    1270:	eb 85       	ldd	r30, Y+11	; 0x0b
    1272:	fc 85       	ldd	r31, Y+12	; 0x0c
    1274:	00 80       	ld	r0, Z
    1276:	8b 85       	ldd	r24, Y+11	; 0x0b
    1278:	9c 85       	ldd	r25, Y+12	; 0x0c
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9c 87       	std	Y+12, r25	; 0x0c
    127e:	8b 87       	std	Y+11, r24	; 0x0b
    1280:	e9 85       	ldd	r30, Y+9	; 0x09
    1282:	fa 85       	ldd	r31, Y+10	; 0x0a
    1284:	00 82       	st	Z, r0
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	9a 87       	std	Y+10, r25	; 0x0a
    128e:	89 87       	std	Y+9, r24	; 0x09
    1290:	9d 85       	ldd	r25, Y+13	; 0x0d
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	9d 87       	std	Y+13, r25	; 0x0d
    1296:	ed 85       	ldd	r30, Y+13	; 0x0d
    1298:	ee 23       	and	r30, r30
    129a:	51 f7       	brne	.-44     	; 0x1270 <main+0x28>
	UART_init(&UART_Config);
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 d6 11 	call	0x23ac	; 0x23ac <UART_init>
	/* Init-ialize the TWI/I2C Driver
	 * Bit Rate = 400.000 K-bps
	 * Slave Address = 0b00000010
	 * No Pre-scaler
	 */
	TWI_ConfigType TWI_Config = {0x02, 0b00000010, TWI_Pre_scaler_0};
    12a4:	ce 01       	movw	r24, r28
    12a6:	06 96       	adiw	r24, 0x06	; 6
    12a8:	9f 87       	std	Y+15, r25	; 0x0f
    12aa:	8e 87       	std	Y+14, r24	; 0x0e
    12ac:	e5 e7       	ldi	r30, 0x75	; 117
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	f9 8b       	std	Y+17, r31	; 0x11
    12b2:	e8 8b       	std	Y+16, r30	; 0x10
    12b4:	f3 e0       	ldi	r31, 0x03	; 3
    12b6:	fa 8b       	std	Y+18, r31	; 0x12
    12b8:	e8 89       	ldd	r30, Y+16	; 0x10
    12ba:	f9 89       	ldd	r31, Y+17	; 0x11
    12bc:	00 80       	ld	r0, Z
    12be:	88 89       	ldd	r24, Y+16	; 0x10
    12c0:	99 89       	ldd	r25, Y+17	; 0x11
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	99 8b       	std	Y+17, r25	; 0x11
    12c6:	88 8b       	std	Y+16, r24	; 0x10
    12c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    12ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    12cc:	00 82       	st	Z, r0
    12ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    12d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	9f 87       	std	Y+15, r25	; 0x0f
    12d6:	8e 87       	std	Y+14, r24	; 0x0e
    12d8:	9a 89       	ldd	r25, Y+18	; 0x12
    12da:	91 50       	subi	r25, 0x01	; 1
    12dc:	9a 8b       	std	Y+18, r25	; 0x12
    12de:	ea 89       	ldd	r30, Y+18	; 0x12
    12e0:	ee 23       	and	r30, r30
    12e2:	51 f7       	brne	.-44     	; 0x12b8 <main+0x70>
	TWI_init(&TWI_Config);
    12e4:	ce 01       	movw	r24, r28
    12e6:	06 96       	adiw	r24, 0x06	; 6
    12e8:	0e 94 47 11 	call	0x228e	; 0x228e <TWI_init>

	/* Init-ialize Buzzer Driver */
	buzzer_init();
    12ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>

	/* Enable global interrupts in MC by setting the I-Bit */
	SREG  |= (1<<7);
    12f0:	af e5       	ldi	r26, 0x5F	; 95
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef e5       	ldi	r30, 0x5F	; 95
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	8c 93       	st	X, r24

	/* Init-ialize Motor Driver */
	DcMotor_Init();
    12fe:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <DcMotor_Init>

	/* Init-ialize call back function */
	Timer0_setCallBack(Timer0_DeInit);
    1302:	83 ea       	ldi	r24, 0xA3	; 163
    1304:	9c e0       	ldi	r25, 0x0C	; 12
    1306:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Timer0_setCallBack>

	/* Wait until HMI-ECU is ready to receive */
	while(UART_recieveByte() != IAM_READY){}
    130a:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
    130e:	88 23       	and	r24, r24
    1310:	e1 f7       	brne	.-8      	; 0x130a <main+0xc2>

	/* Create password in first use of application */
	create_pass_option();
    1312:	0e 94 b2 07 	call	0xf64	; 0xf64 <create_pass_option>

	for(;;)
	{
		/* Go to HOME SCREEN to display orders after creating password */
		UART_sendByte(HOME_SCREEN);
    1316:	87 e0       	ldi	r24, 0x07	; 7
    1318:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>

		/* according to user input going to each option */
		if(home_screen() == '+')
    131c:	0e 94 cc 05 	call	0xb98	; 0xb98 <home_screen>
    1320:	8b 32       	cpi	r24, 0x2B	; 43
    1322:	19 f4       	brne	.+6      	; 0x132a <main+0xe2>
		{
			open_door_option();
    1324:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <open_door_option>
    1328:	f6 cf       	rjmp	.-20     	; 0x1316 <main+0xce>
		}

		else
		{
			change_pass_option();
    132a:	0e 94 98 08 	call	0x1130	; 0x1130 <change_pass_option>
    132e:	f3 cf       	rjmp	.-26     	; 0x1316 <main+0xce>

00001330 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    135a:	80 91 8c 00 	lds	r24, 0x008C
    135e:	90 91 8d 00 	lds	r25, 0x008D
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	d1 f0       	breq	.+52     	; 0x139a <__vector_9+0x6a>
	{
		if(T_ovf_flag == T_ovf_counter)
    1366:	20 91 95 00 	lds	r18, 0x0095
    136a:	30 91 96 00 	lds	r19, 0x0096
    136e:	80 91 93 00 	lds	r24, 0x0093
    1372:	90 91 94 00 	lds	r25, 0x0094
    1376:	28 17       	cp	r18, r24
    1378:	39 07       	cpc	r19, r25
    137a:	31 f4       	brne	.+12     	; 0x1388 <__vector_9+0x58>
		{
			/* Call the Call Back function in the application after Timer Over Flow */
			(*g_callBackPtr_Timer0)();
    137c:	e0 91 8c 00 	lds	r30, 0x008C
    1380:	f0 91 8d 00 	lds	r31, 0x008D
    1384:	09 95       	icall
    1386:	09 c0       	rjmp	.+18     	; 0x139a <__vector_9+0x6a>
		}
		else
		{
			T_ovf_flag++;
    1388:	80 91 95 00 	lds	r24, 0x0095
    138c:	90 91 96 00 	lds	r25, 0x0096
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	90 93 96 00 	sts	0x0096, r25
    1396:	80 93 95 00 	sts	0x0095, r24
		}
	}
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	if(T_ovf_flag == T_ovf_counter)
    13ea:	20 91 95 00 	lds	r18, 0x0095
    13ee:	30 91 96 00 	lds	r19, 0x0096
    13f2:	80 91 93 00 	lds	r24, 0x0093
    13f6:	90 91 94 00 	lds	r25, 0x0094
    13fa:	28 17       	cp	r18, r24
    13fc:	39 07       	cpc	r19, r25
    13fe:	61 f4       	brne	.+24     	; 0x1418 <__vector_8+0x58>
	{
		if(g_callBackPtr_Timer1 != NULL_PTR)
    1400:	80 91 8e 00 	lds	r24, 0x008E
    1404:	90 91 8f 00 	lds	r25, 0x008F
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	79 f0       	breq	.+30     	; 0x142a <__vector_8+0x6a>
		{
			/* Call the Call Back function in the application after Timer Over Flow */
			(*g_callBackPtr_Timer1)();
    140c:	e0 91 8e 00 	lds	r30, 0x008E
    1410:	f0 91 8f 00 	lds	r31, 0x008F
    1414:	09 95       	icall
    1416:	09 c0       	rjmp	.+18     	; 0x142a <__vector_8+0x6a>
		}
	}
	else
	{
		T_ovf_flag++;
    1418:	80 91 95 00 	lds	r24, 0x0095
    141c:	90 91 96 00 	lds	r25, 0x0096
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	90 93 96 00 	sts	0x0096, r25
    1426:	80 93 95 00 	sts	0x0095, r24
	}

}
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	if(T_ovf_flag == T_ovf_counter)
    147a:	20 91 95 00 	lds	r18, 0x0095
    147e:	30 91 96 00 	lds	r19, 0x0096
    1482:	80 91 93 00 	lds	r24, 0x0093
    1486:	90 91 94 00 	lds	r25, 0x0094
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	61 f4       	brne	.+24     	; 0x14a8 <__vector_4+0x58>
	{
		if(g_callBackPtr_Timer2 != NULL_PTR)
    1490:	80 91 90 00 	lds	r24, 0x0090
    1494:	90 91 91 00 	lds	r25, 0x0091
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	79 f0       	breq	.+30     	; 0x14ba <__vector_4+0x6a>
		{
			/* Call the Call Back function in the application after Timer Over Flow */
			(*g_callBackPtr_Timer2)();
    149c:	e0 91 90 00 	lds	r30, 0x0090
    14a0:	f0 91 91 00 	lds	r31, 0x0091
    14a4:	09 95       	icall
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <__vector_4+0x6a>
		}
	}
	else
	{
		T_ovf_flag++;
    14a8:	80 91 95 00 	lds	r24, 0x0095
    14ac:	90 91 96 00 	lds	r25, 0x0096
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	90 93 96 00 	sts	0x0096, r25
    14b6:	80 93 95 00 	sts	0x0095, r24
	}

}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    150a:	80 91 8c 00 	lds	r24, 0x008C
    150e:	90 91 8d 00 	lds	r25, 0x008D
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	29 f0       	breq	.+10     	; 0x1520 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer0)();
    1516:	e0 91 8c 00 	lds	r30, 0x008C
    151a:	f0 91 8d 00 	lds	r31, 0x008D
    151e:	09 95       	icall
	}
}
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	ff 91       	pop	r31
    1526:	ef 91       	pop	r30
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	7f 91       	pop	r23
    1532:	6f 91       	pop	r22
    1534:	5f 91       	pop	r21
    1536:	4f 91       	pop	r20
    1538:	3f 91       	pop	r19
    153a:	2f 91       	pop	r18
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	2f 93       	push	r18
    1552:	3f 93       	push	r19
    1554:	4f 93       	push	r20
    1556:	5f 93       	push	r21
    1558:	6f 93       	push	r22
    155a:	7f 93       	push	r23
    155c:	8f 93       	push	r24
    155e:	9f 93       	push	r25
    1560:	af 93       	push	r26
    1562:	bf 93       	push	r27
    1564:	ef 93       	push	r30
    1566:	ff 93       	push	r31
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    1570:	80 91 8e 00 	lds	r24, 0x008E
    1574:	90 91 8f 00 	lds	r25, 0x008F
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	29 f0       	breq	.+10     	; 0x1586 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer1)();
    157c:	e0 91 8e 00 	lds	r30, 0x008E
    1580:	f0 91 8f 00 	lds	r31, 0x008F
    1584:	09 95       	icall
	}
}
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    15d6:	80 91 8e 00 	lds	r24, 0x008E
    15da:	90 91 8f 00 	lds	r25, 0x008F
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	29 f0       	breq	.+10     	; 0x15ec <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer1)();
    15e2:	e0 91 8e 00 	lds	r30, 0x008E
    15e6:	f0 91 8f 00 	lds	r31, 0x008F
    15ea:	09 95       	icall
	}
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    163c:	80 91 90 00 	lds	r24, 0x0090
    1640:	90 91 91 00 	lds	r25, 0x0091
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer2)();
    1648:	e0 91 90 00 	lds	r30, 0x0090
    164c:	f0 91 91 00 	lds	r31, 0x0091
    1650:	09 95       	icall
	}
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <Timer_init>:
/*
 * Description :
 * Function responsible for initiate timer with configuration from structure & Enable it
 */
void Timer_init(const Timer_ConfigType * Timer_Config_Ptr)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	00 d0       	rcall	.+0      	; 0x167e <Timer_init+0x6>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
	if(Timer_Config_Ptr->T_Select == Timer0)
    1686:	e9 81       	ldd	r30, Y+1	; 0x01
    1688:	fa 81       	ldd	r31, Y+2	; 0x02
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	09 f0       	breq	.+2      	; 0x1692 <Timer_init+0x1a>
    1690:	59 c0       	rjmp	.+178    	; 0x1744 <Timer_init+0xcc>
	{
		if(Timer_Config_Ptr->T_Mode == T0_Ovf_Mode)
    1692:	e9 81       	ldd	r30, Y+1	; 0x01
    1694:	fa 81       	ldd	r31, Y+2	; 0x02
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	88 23       	and	r24, r24
    169a:	51 f5       	brne	.+84     	; 0x16f0 <Timer_init+0x78>
		{
			T_ovf_flag = 0;												/* set over flow flag to zero */
    169c:	10 92 96 00 	sts	0x0096, r1
    16a0:	10 92 95 00 	sts	0x0095, r1
			T_ovf_counter = Timer_Config_Ptr->T_ovf_counter;			/* set number of over flow */
    16a4:	e9 81       	ldd	r30, Y+1	; 0x01
    16a6:	fa 81       	ldd	r31, Y+2	; 0x02
    16a8:	86 81       	ldd	r24, Z+6	; 0x06
    16aa:	97 81       	ldd	r25, Z+7	; 0x07
    16ac:	90 93 94 00 	sts	0x0094, r25
    16b0:	80 93 93 00 	sts	0x0093, r24
			TCNT0 = Timer_Config_Ptr->T0_T2_Initial_Value; 				/* Set Timer0 initial value */
    16b4:	a2 e5       	ldi	r26, 0x52	; 82
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ba:	fa 81       	ldd	r31, Y+2	; 0x02
    16bc:	83 81       	ldd	r24, Z+3	; 0x03
    16be:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE0);										/* Enable Timer0 Overflow Interrupt */
    16c0:	a9 e5       	ldi	r26, 0x59	; 89
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e9 e5       	ldi	r30, 0x59	; 89
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	81 60       	ori	r24, 0x01	; 1
    16cc:	8c 93       	st	X, r24
			TCCR0 = (1<<FOC0);											/* Non PWM mode */
    16ce:	e3 e5       	ldi	r30, 0x53	; 83
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 e8       	ldi	r24, 0x80	; 128
    16d4:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer0 Pre-scaler */
    16d6:	a3 e5       	ldi	r26, 0x53	; 83
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e5       	ldi	r30, 0x53	; 83
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	98 2f       	mov	r25, r24
    16e2:	98 7f       	andi	r25, 0xF8	; 248
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	81 81       	ldd	r24, Z+1	; 0x01
    16ea:	89 2b       	or	r24, r25
    16ec:	8c 93       	st	X, r24
    16ee:	26 c1       	rjmp	.+588    	; 0x193c <Timer_init+0x2c4>

		}
		else if(Timer_Config_Ptr->T_Mode == T0_Compare_Mode)
    16f0:	e9 81       	ldd	r30, Y+1	; 0x01
    16f2:	fa 81       	ldd	r31, Y+2	; 0x02
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	09 f0       	breq	.+2      	; 0x16fc <Timer_init+0x84>
    16fa:	20 c1       	rjmp	.+576    	; 0x193c <Timer_init+0x2c4>
		{
			TCNT0 = Timer_Config_Ptr->T0_T2_Initial_Value;				/* Set Timer0 initial value */
    16fc:	a2 e5       	ldi	r26, 0x52	; 82
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e9 81       	ldd	r30, Y+1	; 0x01
    1702:	fa 81       	ldd	r31, Y+2	; 0x02
    1704:	83 81       	ldd	r24, Z+3	; 0x03
    1706:	8c 93       	st	X, r24
			OCR0 = Timer_Config_Ptr->T0_T2_Comp_Value;					/* Set Compare Value */
    1708:	ac e5       	ldi	r26, 0x5C	; 92
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	80 85       	ldd	r24, Z+8	; 0x08
    1712:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0);										/* Enable Timer0 Compare Interrupt */
    1714:	a9 e5       	ldi	r26, 0x59	; 89
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e9 e5       	ldi	r30, 0x59	; 89
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	8c 93       	st	X, r24
			TCCR0 = (1<<FOC0) | (1<<WGM01);								/* Non PWM mode and enable CTC Mode*/
    1722:	e3 e5       	ldi	r30, 0x53	; 83
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	88 e8       	ldi	r24, 0x88	; 136
    1728:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer0 Pre-scaler */
    172a:	a3 e5       	ldi	r26, 0x53	; 83
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e3 e5       	ldi	r30, 0x53	; 83
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	98 2f       	mov	r25, r24
    1736:	98 7f       	andi	r25, 0xF8	; 248
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	81 81       	ldd	r24, Z+1	; 0x01
    173e:	89 2b       	or	r24, r25
    1740:	8c 93       	st	X, r24
    1742:	fc c0       	rjmp	.+504    	; 0x193c <Timer_init+0x2c4>
		}
	}

	else if(Timer_Config_Ptr->T_Select == Timer1)
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	80 81       	ld	r24, Z
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	09 f0       	breq	.+2      	; 0x1750 <Timer_init+0xd8>
    174e:	99 c0       	rjmp	.+306    	; 0x1882 <Timer_init+0x20a>
	{
		if(Timer_Config_Ptr->T_Mode == T1_Ovf_Mode)
    1750:	e9 81       	ldd	r30, Y+1	; 0x01
    1752:	fa 81       	ldd	r31, Y+2	; 0x02
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	69 f5       	brne	.+90     	; 0x17b4 <Timer_init+0x13c>
		{
			T_ovf_flag = 0;												/* set over flow flag to zero */
    175a:	10 92 96 00 	sts	0x0096, r1
    175e:	10 92 95 00 	sts	0x0095, r1
			T_ovf_counter = Timer_Config_Ptr->T_ovf_counter;			/* set number of over flow */
    1762:	e9 81       	ldd	r30, Y+1	; 0x01
    1764:	fa 81       	ldd	r31, Y+2	; 0x02
    1766:	86 81       	ldd	r24, Z+6	; 0x06
    1768:	97 81       	ldd	r25, Z+7	; 0x07
    176a:	90 93 94 00 	sts	0x0094, r25
    176e:	80 93 93 00 	sts	0x0093, r24
			TCNT1 = Timer_Config_Ptr->T1_Initial_Value;					/* Set Timer1 initial value */
    1772:	ac e4       	ldi	r26, 0x4C	; 76
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e9 81       	ldd	r30, Y+1	; 0x01
    1778:	fa 81       	ldd	r31, Y+2	; 0x02
    177a:	84 81       	ldd	r24, Z+4	; 0x04
    177c:	95 81       	ldd	r25, Z+5	; 0x05
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	9c 93       	st	X, r25
    1782:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, TOIE1);										/* Enable Timer1 Overflow Interrupt */
    1784:	a9 e5       	ldi	r26, 0x59	; 89
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e9 e5       	ldi	r30, 0x59	; 89
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	84 60       	ori	r24, 0x04	; 4
    1790:	8c 93       	st	X, r24
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);							/* Non PWM mode */
    1792:	ef e4       	ldi	r30, 0x4F	; 79
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer1 Pre-scaler */
    179a:	ae e4       	ldi	r26, 0x4E	; 78
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ee e4       	ldi	r30, 0x4E	; 78
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	98 2f       	mov	r25, r24
    17a6:	98 7f       	andi	r25, 0xF8	; 248
    17a8:	e9 81       	ldd	r30, Y+1	; 0x01
    17aa:	fa 81       	ldd	r31, Y+2	; 0x02
    17ac:	81 81       	ldd	r24, Z+1	; 0x01
    17ae:	89 2b       	or	r24, r25
    17b0:	8c 93       	st	X, r24
    17b2:	c4 c0       	rjmp	.+392    	; 0x193c <Timer_init+0x2c4>
		}
		else if(Timer_Config_Ptr->T_Mode == T1_CompareA_Mode)
    17b4:	e9 81       	ldd	r30, Y+1	; 0x01
    17b6:	fa 81       	ldd	r31, Y+2	; 0x02
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	71 f5       	brne	.+92     	; 0x181a <Timer_init+0x1a2>
		{
			TCNT1 = Timer_Config_Ptr->T1_Initial_Value;					/* Set Timer1 initial value */
    17be:	ac e4       	ldi	r26, 0x4C	; 76
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	84 81       	ldd	r24, Z+4	; 0x04
    17c8:	95 81       	ldd	r25, Z+5	; 0x05
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	9c 93       	st	X, r25
    17ce:	8e 93       	st	-X, r24
			OCR1A = Timer_Config_Ptr->T1_Comp_Value;					/* Set Compare Value */
    17d0:	aa e4       	ldi	r26, 0x4A	; 74
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e9 81       	ldd	r30, Y+1	; 0x01
    17d6:	fa 81       	ldd	r31, Y+2	; 0x02
    17d8:	81 85       	ldd	r24, Z+9	; 0x09
    17da:	92 85       	ldd	r25, Z+10	; 0x0a
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);										/* Enable Timer1 CompareA Interrupt */
    17e2:	a9 e5       	ldi	r26, 0x59	; 89
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e9 e5       	ldi	r30, 0x59	; 89
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 61       	ori	r24, 0x10	; 16
    17ee:	8c 93       	st	X, r24
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);							/* Non PWM mode */
    17f0:	ef e4       	ldi	r30, 0x4F	; 79
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8c e0       	ldi	r24, 0x0C	; 12
    17f6:	80 83       	st	Z, r24
			TCCR1B = (1<<WGM12);										/* Enable CTC Mode */
    17f8:	ee e4       	ldi	r30, 0x4E	; 78
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	88 e0       	ldi	r24, 0x08	; 8
    17fe:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer1 Pre-scaler */
    1800:	ae e4       	ldi	r26, 0x4E	; 78
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ee e4       	ldi	r30, 0x4E	; 78
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	98 2f       	mov	r25, r24
    180c:	98 7f       	andi	r25, 0xF8	; 248
    180e:	e9 81       	ldd	r30, Y+1	; 0x01
    1810:	fa 81       	ldd	r31, Y+2	; 0x02
    1812:	81 81       	ldd	r24, Z+1	; 0x01
    1814:	89 2b       	or	r24, r25
    1816:	8c 93       	st	X, r24
    1818:	91 c0       	rjmp	.+290    	; 0x193c <Timer_init+0x2c4>

		}
		else if(Timer_Config_Ptr->T_Mode == T1_CompareB_Mode)
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	09 f0       	breq	.+2      	; 0x1826 <Timer_init+0x1ae>
    1824:	8b c0       	rjmp	.+278    	; 0x193c <Timer_init+0x2c4>
		{
			TCNT1 = Timer_Config_Ptr->T1_Initial_Value;					/* Set Timer1 initial value */
    1826:	ac e4       	ldi	r26, 0x4C	; 76
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	84 81       	ldd	r24, Z+4	; 0x04
    1830:	95 81       	ldd	r25, Z+5	; 0x05
    1832:	11 96       	adiw	r26, 0x01	; 1
    1834:	9c 93       	st	X, r25
    1836:	8e 93       	st	-X, r24
			OCR1B = Timer_Config_Ptr->T1_Comp_Value;					/* Set Compare Value */
    1838:	a8 e4       	ldi	r26, 0x48	; 72
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e9 81       	ldd	r30, Y+1	; 0x01
    183e:	fa 81       	ldd	r31, Y+2	; 0x02
    1840:	81 85       	ldd	r24, Z+9	; 0x09
    1842:	92 85       	ldd	r25, Z+10	; 0x0a
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	9c 93       	st	X, r25
    1848:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1B);										/* Enable Timer1 CompareB Interrupt */
    184a:	a9 e5       	ldi	r26, 0x59	; 89
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e9 e5       	ldi	r30, 0x59	; 89
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	88 60       	ori	r24, 0x08	; 8
    1856:	8c 93       	st	X, r24
			TCCR1B = (1<<WGM12);										/* Enable CTC Mode */
    1858:	ee e4       	ldi	r30, 0x4E	; 78
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	80 83       	st	Z, r24
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);							/* Non PWM mode */
    1860:	ef e4       	ldi	r30, 0x4F	; 79
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8c e0       	ldi	r24, 0x0C	; 12
    1866:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer1 Pre-scaler */
    1868:	ae e4       	ldi	r26, 0x4E	; 78
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ee e4       	ldi	r30, 0x4E	; 78
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	98 2f       	mov	r25, r24
    1874:	98 7f       	andi	r25, 0xF8	; 248
    1876:	e9 81       	ldd	r30, Y+1	; 0x01
    1878:	fa 81       	ldd	r31, Y+2	; 0x02
    187a:	81 81       	ldd	r24, Z+1	; 0x01
    187c:	89 2b       	or	r24, r25
    187e:	8c 93       	st	X, r24
    1880:	5d c0       	rjmp	.+186    	; 0x193c <Timer_init+0x2c4>
		}
	}

	else if(Timer_Config_Ptr->T_Select == Timer2)
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	80 81       	ld	r24, Z
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	09 f0       	breq	.+2      	; 0x188e <Timer_init+0x216>
    188c:	57 c0       	rjmp	.+174    	; 0x193c <Timer_init+0x2c4>
	{
		if(Timer_Config_Ptr->T_Mode == T2_Ovf_Mode)
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	85 30       	cpi	r24, 0x05	; 5
    1896:	51 f5       	brne	.+84     	; 0x18ec <Timer_init+0x274>
		{
			T_ovf_flag = 0;													/* set over flow flag to zero */
    1898:	10 92 96 00 	sts	0x0096, r1
    189c:	10 92 95 00 	sts	0x0095, r1
			T_ovf_counter = Timer_Config_Ptr->T_ovf_counter;				/* set number of over flow */
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	86 81       	ldd	r24, Z+6	; 0x06
    18a6:	97 81       	ldd	r25, Z+7	; 0x07
    18a8:	90 93 94 00 	sts	0x0094, r25
    18ac:	80 93 93 00 	sts	0x0093, r24
			TCNT2 = Timer_Config_Ptr->T0_T2_Initial_Value;					/* Set Timer2 initial value */
    18b0:	a4 e4       	ldi	r26, 0x44	; 68
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e9 81       	ldd	r30, Y+1	; 0x01
    18b6:	fa 81       	ldd	r31, Y+2	; 0x02
    18b8:	83 81       	ldd	r24, Z+3	; 0x03
    18ba:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE2);											/* Enable Timer2 Overflow Interrupt */
    18bc:	a9 e5       	ldi	r26, 0x59	; 89
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e9 e5       	ldi	r30, 0x59	; 89
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	8c 93       	st	X, r24
			TCCR2 = (1<<FOC2);												/* Non PWM mode */
    18ca:	e5 e4       	ldi	r30, 0x45	; 69
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 e8       	ldi	r24, 0x80	; 128
    18d0:	80 83       	st	Z, r24
			TCCR2 = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);		/* Configure Timer2 Pre-scaler */
    18d2:	a5 e4       	ldi	r26, 0x45	; 69
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ee e4       	ldi	r30, 0x4E	; 78
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	98 2f       	mov	r25, r24
    18de:	98 7f       	andi	r25, 0xF8	; 248
    18e0:	e9 81       	ldd	r30, Y+1	; 0x01
    18e2:	fa 81       	ldd	r31, Y+2	; 0x02
    18e4:	81 81       	ldd	r24, Z+1	; 0x01
    18e6:	89 2b       	or	r24, r25
    18e8:	8c 93       	st	X, r24
    18ea:	28 c0       	rjmp	.+80     	; 0x193c <Timer_init+0x2c4>
		}
		else if(Timer_Config_Ptr->T_Mode == T2_Compare_Mode)
    18ec:	e9 81       	ldd	r30, Y+1	; 0x01
    18ee:	fa 81       	ldd	r31, Y+2	; 0x02
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	86 30       	cpi	r24, 0x06	; 6
    18f4:	19 f5       	brne	.+70     	; 0x193c <Timer_init+0x2c4>
		{
			TCNT2 = Timer_Config_Ptr->T0_T2_Initial_Value;					/* Set Timer2 initial value */
    18f6:	a4 e4       	ldi	r26, 0x44	; 68
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e9 81       	ldd	r30, Y+1	; 0x01
    18fc:	fa 81       	ldd	r31, Y+2	; 0x02
    18fe:	83 81       	ldd	r24, Z+3	; 0x03
    1900:	8c 93       	st	X, r24
			OCR2 = Timer_Config_Ptr->T0_T2_Comp_Value;						/* Set Compare Value */
    1902:	a3 e4       	ldi	r26, 0x43	; 67
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e9 81       	ldd	r30, Y+1	; 0x01
    1908:	fa 81       	ldd	r31, Y+2	; 0x02
    190a:	80 85       	ldd	r24, Z+8	; 0x08
    190c:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);											/* Enable Timer2 Compare Interrupt */
    190e:	a9 e5       	ldi	r26, 0x59	; 89
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e9 e5       	ldi	r30, 0x59	; 89
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 68       	ori	r24, 0x80	; 128
    191a:	8c 93       	st	X, r24
			TCCR2 = (1<<FOC2) | (1<<WGM21);									/* Non PWM mode and enable CTC Mode */
    191c:	e5 e4       	ldi	r30, 0x45	; 69
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	88 e8       	ldi	r24, 0x88	; 136
    1922:	80 83       	st	Z, r24
			TCCR2 = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);		/* Configure Timer2 Pre-scaler */
    1924:	a5 e4       	ldi	r26, 0x45	; 69
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ee e4       	ldi	r30, 0x4E	; 78
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	98 2f       	mov	r25, r24
    1930:	98 7f       	andi	r25, 0xF8	; 248
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	81 81       	ldd	r24, Z+1	; 0x01
    1938:	89 2b       	or	r24, r25
    193a:	8c 93       	st	X, r24
		}
	}
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <Timer0_DeInit>:
/*
 * Description :
 * Functions to Disable Timers
 */
void Timer0_DeInit(void)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE0);									/* Disable Timer0 Overflow Interrupt */
    194e:	a9 e5       	ldi	r26, 0x59	; 89
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e9 e5       	ldi	r30, 0x59	; 89
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE0);									/* Disable Timer0 Compare Interrupt */
    195c:	a9 e5       	ldi	r26, 0x59	; 89
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e9 e5       	ldi	r30, 0x59	; 89
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8d 7f       	andi	r24, 0xFD	; 253
    1968:	8c 93       	st	X, r24
	timer_finish++;
    196a:	80 91 92 00 	lds	r24, 0x0092
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	80 93 92 00 	sts	0x0092, r24
}
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <Timer1_DeInit>:

void Timer1_DeInit(void)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE1);									/* Disable Timer1 Overflow Interrupt */
    1982:	a9 e5       	ldi	r26, 0x59	; 89
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e9 e5       	ldi	r30, 0x59	; 89
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8b 7f       	andi	r24, 0xFB	; 251
    198e:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);									/* Disable Timer1 CompareA Interrupt */
    1990:	a9 e5       	ldi	r26, 0x59	; 89
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e9 e5       	ldi	r30, 0x59	; 89
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);									/* Disable Timer1 CompareB Interrupt */
    199e:	a9 e5       	ldi	r26, 0x59	; 89
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e9 e5       	ldi	r30, 0x59	; 89
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	87 7f       	andi	r24, 0xF7	; 247
    19aa:	8c 93       	st	X, r24
	timer_finish++;
    19ac:	80 91 92 00 	lds	r24, 0x0092
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	80 93 92 00 	sts	0x0092, r24
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <Timer2_DeInit>:

void Timer2_DeInit(void)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE2);									/* Disable Timer2 Overflow Interrupt */
    19c4:	a9 e5       	ldi	r26, 0x59	; 89
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e9 e5       	ldi	r30, 0x59	; 89
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 7b       	andi	r24, 0xBF	; 191
    19d0:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE2);									/* Disable Timer2 CompareA Interrupt */
    19d2:	a9 e5       	ldi	r26, 0x59	; 89
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e9 e5       	ldi	r30, 0x59	; 89
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 77       	andi	r24, 0x7F	; 127
    19de:	8c 93       	st	X, r24
	timer_finish++;
    19e0:	80 91 92 00 	lds	r24, 0x0092
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	80 93 92 00 	sts	0x0092, r24
}
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <Timer0_setCallBack>:
 * Description :
 * Functions to set the Call Back function address for each timer
 */

void Timer0_setCallBack(void(*a_ptr)(void))
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <Timer0_setCallBack+0x6>
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer0 = a_ptr;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	90 93 8d 00 	sts	0x008D, r25
    1a06:	80 93 8c 00 	sts	0x008C, r24
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <Timer1_setCallBack+0x6>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer1 = a_ptr;
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	90 93 8f 00 	sts	0x008F, r25
    1a2a:	80 93 8e 00 	sts	0x008E, r24
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <Timer2_setCallBack>:

void Timer2_setCallBack(void(*a_ptr)(void))
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <Timer2_setCallBack+0x6>
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer2 = a_ptr;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	90 93 91 00 	sts	0x0091, r25
    1a4e:	80 93 90 00 	sts	0x0090, r24
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <DcMotor_Init>:
/*
 * Description :
 * Function responsible for DC-Motor Init-ialization
 */
void DcMotor_Init(void)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	/* Set DC-Motor Pins as O/P */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	66 e0       	ldi	r22, 0x06	; 6
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	67 e0       	ldi	r22, 0x07	; 7
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <GPIO_setupPinDirection>

	/* Set Initial state for the motor to STOP state */
	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	66 e0       	ldi	r22, 0x06	; 6
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	67 e0       	ldi	r22, 0x07	; 7
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_writePin>

}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <DcMotor_Rotate>:
/*
 * Description :
 * Function responsible for DC-Motor state
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	/* Set DC-Motor pins according to its state (CW, A-CW & STOP) */
	PORTD = (PORTD & 0X3F) | ((state & 0X03) << 6);
    1a9e:	a2 e3       	ldi	r26, 0x32	; 50
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e2 e3       	ldi	r30, 0x32	; 50
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	2f 73       	andi	r18, 0x3F	; 63
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	00 24       	eor	r0, r0
    1ab4:	96 95       	lsr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	07 94       	ror	r0
    1aba:	96 95       	lsr	r25
    1abc:	87 95       	ror	r24
    1abe:	07 94       	ror	r0
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	80 2d       	mov	r24, r0
    1ac4:	82 2b       	or	r24, r18
    1ac6:	8c 93       	st	X, r24
}
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <EEPROM_writeByte>:
/*
 * Description :
 * Function responsible for send address of memory to write data in it
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <EEPROM_writeByte+0x6>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <EEPROM_writeByte+0x8>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1ae2:	0e 94 6f 11 	call	0x22de	; 0x22de <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ae6:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1aea:	88 30       	cpi	r24, 0x08	; 8
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <EEPROM_writeByte+0x22>
        return ERROR;
    1aee:	1c 82       	std	Y+4, r1	; 0x04
    1af0:	28 c0       	rjmp	.+80     	; 0x1b42 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	80 70       	andi	r24, 0x00	; 0
    1af8:	97 70       	andi	r25, 0x07	; 7
    1afa:	88 0f       	add	r24, r24
    1afc:	89 2f       	mov	r24, r25
    1afe:	88 1f       	adc	r24, r24
    1b00:	99 0b       	sbc	r25, r25
    1b02:	91 95       	neg	r25
    1b04:	80 6a       	ori	r24, 0xA0	; 160
    1b06:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b0a:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1b0e:	88 31       	cpi	r24, 0x18	; 24
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <EEPROM_writeByte+0x46>
        return ERROR; 
    1b12:	1c 82       	std	Y+4, r1	; 0x04
    1b14:	16 c0       	rjmp	.+44     	; 0x1b42 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b1c:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1b20:	88 32       	cpi	r24, 0x28	; 40
    1b22:	11 f0       	breq	.+4      	; 0x1b28 <EEPROM_writeByte+0x58>
        return ERROR;
    1b24:	1c 82       	std	Y+4, r1	; 0x04
    1b26:	0d c0       	rjmp	.+26     	; 0x1b42 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b2e:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1b32:	88 32       	cpi	r24, 0x28	; 40
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <EEPROM_writeByte+0x6a>
        return ERROR;
    1b36:	1c 82       	std	Y+4, r1	; 0x04
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1b3a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_stop>
	
    return SUCCESS;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	8c 83       	std	Y+4, r24	; 0x04
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <EEPROM_readByte>:
/*
 * Description :
 * Function responsible for send address of memory to read data from it
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <EEPROM_readByte+0x6>
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <EEPROM_readByte+0x8>
    1b5a:	0f 92       	push	r0
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	7c 83       	std	Y+4, r23	; 0x04
    1b66:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b68:	0e 94 6f 11 	call	0x22de	; 0x22de <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b6c:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1b70:	88 30       	cpi	r24, 0x08	; 8
    1b72:	11 f0       	breq	.+4      	; 0x1b78 <EEPROM_readByte+0x26>
        return ERROR;
    1b74:	1d 82       	std	Y+5, r1	; 0x05
    1b76:	44 c0       	rjmp	.+136    	; 0x1c00 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	80 70       	andi	r24, 0x00	; 0
    1b7e:	97 70       	andi	r25, 0x07	; 7
    1b80:	88 0f       	add	r24, r24
    1b82:	89 2f       	mov	r24, r25
    1b84:	88 1f       	adc	r24, r24
    1b86:	99 0b       	sbc	r25, r25
    1b88:	91 95       	neg	r25
    1b8a:	80 6a       	ori	r24, 0xA0	; 160
    1b8c:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b90:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1b94:	88 31       	cpi	r24, 0x18	; 24
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <EEPROM_readByte+0x4a>
        return ERROR;
    1b98:	1d 82       	std	Y+5, r1	; 0x05
    1b9a:	32 c0       	rjmp	.+100    	; 0x1c00 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ba2:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1ba6:	88 32       	cpi	r24, 0x28	; 40
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <EEPROM_readByte+0x5c>
        return ERROR;
    1baa:	1d 82       	std	Y+5, r1	; 0x05
    1bac:	29 c0       	rjmp	.+82     	; 0x1c00 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1bae:	0e 94 6f 11 	call	0x22de	; 0x22de <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1bb2:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1bb6:	80 31       	cpi	r24, 0x10	; 16
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <EEPROM_readByte+0x6c>
        return ERROR;
    1bba:	1d 82       	std	Y+5, r1	; 0x05
    1bbc:	21 c0       	rjmp	.+66     	; 0x1c00 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	80 70       	andi	r24, 0x00	; 0
    1bc4:	97 70       	andi	r25, 0x07	; 7
    1bc6:	88 0f       	add	r24, r24
    1bc8:	89 2f       	mov	r24, r25
    1bca:	88 1f       	adc	r24, r24
    1bcc:	99 0b       	sbc	r25, r25
    1bce:	91 95       	neg	r25
    1bd0:	81 6a       	ori	r24, 0xA1	; 161
    1bd2:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1bd6:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1bda:	80 34       	cpi	r24, 0x40	; 64
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <EEPROM_readByte+0x90>
        return ERROR;
    1bde:	1d 82       	std	Y+5, r1	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1be2:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_readByteWithNACK>
    1be6:	eb 81       	ldd	r30, Y+3	; 0x03
    1be8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bea:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1bec:	0e 94 c7 11 	call	0x238e	; 0x238e <TWI_getStatus>
    1bf0:	88 35       	cpi	r24, 0x58	; 88
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <EEPROM_readByte+0xa6>
        return ERROR;
    1bf4:	1d 82       	std	Y+5, r1	; 0x05
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1bf8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_stop>

    return SUCCESS;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <GPIO_setupPinDirection+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <GPIO_setupPinDirection+0x8>
    1c1a:	0f 92       	push	r0
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	6a 83       	std	Y+2, r22	; 0x02
    1c24:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	88 30       	cpi	r24, 0x08	; 8
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <GPIO_setupPinDirection+0x1c>
    1c2c:	d5 c0       	rjmp	.+426    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	84 30       	cpi	r24, 0x04	; 4
    1c32:	08 f0       	brcs	.+2      	; 0x1c36 <GPIO_setupPinDirection+0x24>
    1c34:	d1 c0       	rjmp	.+418    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3d 83       	std	Y+5, r19	; 0x05
    1c3e:	2c 83       	std	Y+4, r18	; 0x04
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	91 05       	cpc	r25, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <GPIO_setupPinDirection+0x3a>
    1c4a:	43 c0       	rjmp	.+134    	; 0x1cd2 <GPIO_setupPinDirection+0xc0>
    1c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <GPIO_setupPinDirection+0x4e>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <GPIO_setupPinDirection+0x68>
    1c5e:	bc c0       	rjmp	.+376    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
    1c60:	2c 81       	ldd	r18, Y+4	; 0x04
    1c62:	3d 81       	ldd	r19, Y+5	; 0x05
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <GPIO_setupPinDirection+0x5a>
    1c6a:	5f c0       	rjmp	.+190    	; 0x1d2a <GPIO_setupPinDirection+0x118>
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	91 05       	cpc	r25, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <GPIO_setupPinDirection+0x66>
    1c76:	85 c0       	rjmp	.+266    	; 0x1d82 <GPIO_setupPinDirection+0x170>
    1c78:	af c0       	rjmp	.+350    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	a1 f4       	brne	.+40     	; 0x1ca8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c80:	aa e3       	ldi	r26, 0x3A	; 58
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ea e3       	ldi	r30, 0x3A	; 58
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <GPIO_setupPinDirection+0x8c>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <GPIO_setupPinDirection+0x88>
    1ca2:	84 2b       	or	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	98 c0       	rjmp	.+304    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ca8:	aa e3       	ldi	r26, 0x3A	; 58
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ea e3       	ldi	r30, 0x3A	; 58
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_setupPinDirection+0xb4>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_setupPinDirection+0xb0>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	83 c0       	rjmp	.+262    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cd8:	a7 e3       	ldi	r26, 0x37	; 55
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e7 e3       	ldi	r30, 0x37	; 55
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_setupPinDirection+0xe4>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_setupPinDirection+0xe0>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	6c c0       	rjmp	.+216    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d00:	a7 e3       	ldi	r26, 0x37	; 55
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e7 e3       	ldi	r30, 0x37	; 55
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_setupPinDirection+0x10c>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_setupPinDirection+0x108>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	57 c0       	rjmp	.+174    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	a1 f4       	brne	.+40     	; 0x1d58 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d30:	a4 e3       	ldi	r26, 0x34	; 52
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e4 e3       	ldi	r30, 0x34	; 52
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_setupPinDirection+0x13c>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_setupPinDirection+0x138>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	40 c0       	rjmp	.+128    	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d58:	a4 e3       	ldi	r26, 0x34	; 52
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e4 e3       	ldi	r30, 0x34	; 52
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <GPIO_setupPinDirection+0x164>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <GPIO_setupPinDirection+0x160>
    1d7a:	80 95       	com	r24
    1d7c:	84 23       	and	r24, r20
    1d7e:	8c 93       	st	X, r24
    1d80:	2b c0       	rjmp	.+86     	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	a1 f4       	brne	.+40     	; 0x1db0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d88:	a1 e3       	ldi	r26, 0x31	; 49
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e1 e3       	ldi	r30, 0x31	; 49
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_setupPinDirection+0x194>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_setupPinDirection+0x190>
    1daa:	84 2b       	or	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1db0:	a1 e3       	ldi	r26, 0x31	; 49
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e1 e3       	ldi	r30, 0x31	; 49
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <GPIO_setupPinDirection+0x1bc>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <GPIO_setupPinDirection+0x1b8>
    1dd2:	80 95       	com	r24
    1dd4:	84 23       	and	r24, r20
    1dd6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <GPIO_writePin+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <GPIO_writePin+0x8>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	6a 83       	std	Y+2, r22	; 0x02
    1dfa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	88 30       	cpi	r24, 0x08	; 8
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <GPIO_writePin+0x1c>
    1e02:	d5 c0       	rjmp	.+426    	; 0x1fae <GPIO_writePin+0x1c6>
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <GPIO_writePin+0x24>
    1e0a:	d1 c0       	rjmp	.+418    	; 0x1fae <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	3d 83       	std	Y+5, r19	; 0x05
    1e14:	2c 83       	std	Y+4, r18	; 0x04
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <GPIO_writePin+0x3a>
    1e20:	43 c0       	rjmp	.+134    	; 0x1ea8 <GPIO_writePin+0xc0>
    1e22:	2c 81       	ldd	r18, Y+4	; 0x04
    1e24:	3d 81       	ldd	r19, Y+5	; 0x05
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	31 05       	cpc	r19, r1
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <GPIO_writePin+0x4e>
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	71 f0       	breq	.+28     	; 0x1e50 <GPIO_writePin+0x68>
    1e34:	bc c0       	rjmp	.+376    	; 0x1fae <GPIO_writePin+0x1c6>
    1e36:	2c 81       	ldd	r18, Y+4	; 0x04
    1e38:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3a:	22 30       	cpi	r18, 0x02	; 2
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <GPIO_writePin+0x5a>
    1e40:	5f c0       	rjmp	.+190    	; 0x1f00 <GPIO_writePin+0x118>
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <GPIO_writePin+0x66>
    1e4c:	85 c0       	rjmp	.+266    	; 0x1f58 <GPIO_writePin+0x170>
    1e4e:	af c0       	rjmp	.+350    	; 0x1fae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	a1 f4       	brne	.+40     	; 0x1e7e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e56:	ab e3       	ldi	r26, 0x3B	; 59
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	eb e3       	ldi	r30, 0x3B	; 59
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <GPIO_writePin+0x8c>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <GPIO_writePin+0x88>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	98 c0       	rjmp	.+304    	; 0x1fae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e7e:	ab e3       	ldi	r26, 0x3B	; 59
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	eb e3       	ldi	r30, 0x3B	; 59
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GPIO_writePin+0xb4>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <GPIO_writePin+0xb0>
    1ea0:	80 95       	com	r24
    1ea2:	84 23       	and	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	83 c0       	rjmp	.+262    	; 0x1fae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	a1 f4       	brne	.+40     	; 0x1ed6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1eae:	a8 e3       	ldi	r26, 0x38	; 56
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e8 e3       	ldi	r30, 0x38	; 56
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_writePin+0xe4>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_writePin+0xe0>
    1ed0:	84 2b       	or	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	6c c0       	rjmp	.+216    	; 0x1fae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ed6:	a8 e3       	ldi	r26, 0x38	; 56
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e8 e3       	ldi	r30, 0x38	; 56
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_writePin+0x10c>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_writePin+0x108>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	57 c0       	rjmp	.+174    	; 0x1fae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	a1 f4       	brne	.+40     	; 0x1f2e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f06:	a5 e3       	ldi	r26, 0x35	; 53
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e5 e3       	ldi	r30, 0x35	; 53
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <GPIO_writePin+0x13c>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <GPIO_writePin+0x138>
    1f28:	84 2b       	or	r24, r20
    1f2a:	8c 93       	st	X, r24
    1f2c:	40 c0       	rjmp	.+128    	; 0x1fae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f2e:	a5 e3       	ldi	r26, 0x35	; 53
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e5 e3       	ldi	r30, 0x35	; 53
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <GPIO_writePin+0x164>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <GPIO_writePin+0x160>
    1f50:	80 95       	com	r24
    1f52:	84 23       	and	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	2b c0       	rjmp	.+86     	; 0x1fae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	a1 f4       	brne	.+40     	; 0x1f86 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f5e:	a2 e3       	ldi	r26, 0x32	; 50
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e2 e3       	ldi	r30, 0x32	; 50
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <GPIO_writePin+0x194>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <GPIO_writePin+0x190>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f86:	a2 e3       	ldi	r26, 0x32	; 50
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e2 e3       	ldi	r30, 0x32	; 50
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <GPIO_writePin+0x1bc>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <GPIO_writePin+0x1b8>
    1fa8:	80 95       	com	r24
    1faa:	84 23       	and	r24, r20
    1fac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <GPIO_readPin+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_readPin+0x8>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <GPIO_readPin+0x1c>
    1fd8:	84 c0       	rjmp	.+264    	; 0x20e2 <GPIO_readPin+0x124>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <GPIO_readPin+0x24>
    1fe0:	80 c0       	rjmp	.+256    	; 0x20e2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3d 83       	std	Y+5, r19	; 0x05
    1fea:	2c 83       	std	Y+4, r18	; 0x04
    1fec:	4c 81       	ldd	r20, Y+4	; 0x04
    1fee:	5d 81       	ldd	r21, Y+5	; 0x05
    1ff0:	41 30       	cpi	r20, 0x01	; 1
    1ff2:	51 05       	cpc	r21, r1
    1ff4:	79 f1       	breq	.+94     	; 0x2054 <GPIO_readPin+0x96>
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	34 f4       	brge	.+12     	; 0x200c <GPIO_readPin+0x4e>
    2000:	2c 81       	ldd	r18, Y+4	; 0x04
    2002:	3d 81       	ldd	r19, Y+5	; 0x05
    2004:	21 15       	cp	r18, r1
    2006:	31 05       	cpc	r19, r1
    2008:	69 f0       	breq	.+26     	; 0x2024 <GPIO_readPin+0x66>
    200a:	6b c0       	rjmp	.+214    	; 0x20e2 <GPIO_readPin+0x124>
    200c:	4c 81       	ldd	r20, Y+4	; 0x04
    200e:	5d 81       	ldd	r21, Y+5	; 0x05
    2010:	42 30       	cpi	r20, 0x02	; 2
    2012:	51 05       	cpc	r21, r1
    2014:	b9 f1       	breq	.+110    	; 0x2084 <GPIO_readPin+0xc6>
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	83 30       	cpi	r24, 0x03	; 3
    201c:	91 05       	cpc	r25, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <GPIO_readPin+0x64>
    2020:	49 c0       	rjmp	.+146    	; 0x20b4 <GPIO_readPin+0xf6>
    2022:	5f c0       	rjmp	.+190    	; 0x20e2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2024:	e9 e3       	ldi	r30, 0x39	; 57
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a9 01       	movw	r20, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <GPIO_readPin+0x7e>
    2038:	55 95       	asr	r21
    203a:	47 95       	ror	r20
    203c:	8a 95       	dec	r24
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <GPIO_readPin+0x7a>
    2040:	ca 01       	movw	r24, r20
    2042:	81 70       	andi	r24, 0x01	; 1
    2044:	90 70       	andi	r25, 0x00	; 0
    2046:	88 23       	and	r24, r24
    2048:	19 f0       	breq	.+6      	; 0x2050 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	49 c0       	rjmp	.+146    	; 0x20e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2050:	19 82       	std	Y+1, r1	; 0x01
    2052:	47 c0       	rjmp	.+142    	; 0x20e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2054:	e6 e3       	ldi	r30, 0x36	; 54
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a9 01       	movw	r20, r18
    2066:	02 c0       	rjmp	.+4      	; 0x206c <GPIO_readPin+0xae>
    2068:	55 95       	asr	r21
    206a:	47 95       	ror	r20
    206c:	8a 95       	dec	r24
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <GPIO_readPin+0xaa>
    2070:	ca 01       	movw	r24, r20
    2072:	81 70       	andi	r24, 0x01	; 1
    2074:	90 70       	andi	r25, 0x00	; 0
    2076:	88 23       	and	r24, r24
    2078:	19 f0       	breq	.+6      	; 0x2080 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	31 c0       	rjmp	.+98     	; 0x20e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2080:	19 82       	std	Y+1, r1	; 0x01
    2082:	2f c0       	rjmp	.+94     	; 0x20e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2084:	e3 e3       	ldi	r30, 0x33	; 51
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a9 01       	movw	r20, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <GPIO_readPin+0xde>
    2098:	55 95       	asr	r21
    209a:	47 95       	ror	r20
    209c:	8a 95       	dec	r24
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <GPIO_readPin+0xda>
    20a0:	ca 01       	movw	r24, r20
    20a2:	81 70       	andi	r24, 0x01	; 1
    20a4:	90 70       	andi	r25, 0x00	; 0
    20a6:	88 23       	and	r24, r24
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	19 c0       	rjmp	.+50     	; 0x20e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20b0:	19 82       	std	Y+1, r1	; 0x01
    20b2:	17 c0       	rjmp	.+46     	; 0x20e2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20b4:	e0 e3       	ldi	r30, 0x30	; 48
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a9 01       	movw	r20, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <GPIO_readPin+0x10e>
    20c8:	55 95       	asr	r21
    20ca:	47 95       	ror	r20
    20cc:	8a 95       	dec	r24
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <GPIO_readPin+0x10a>
    20d0:	ca 01       	movw	r24, r20
    20d2:	81 70       	andi	r24, 0x01	; 1
    20d4:	90 70       	andi	r25, 0x00	; 0
    20d6:	88 23       	and	r24, r24
    20d8:	19 f0       	breq	.+6      	; 0x20e0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20e0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <GPIO_setupPortDirection+0x6>
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <GPIO_setupPortDirection+0x8>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	90 f5       	brcc	.+100    	; 0x216e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	3c 83       	std	Y+4, r19	; 0x04
    2112:	2b 83       	std	Y+3, r18	; 0x03
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	91 05       	cpc	r25, r1
    211c:	d1 f0       	breq	.+52     	; 0x2152 <GPIO_setupPortDirection+0x5e>
    211e:	2b 81       	ldd	r18, Y+3	; 0x03
    2120:	3c 81       	ldd	r19, Y+4	; 0x04
    2122:	22 30       	cpi	r18, 0x02	; 2
    2124:	31 05       	cpc	r19, r1
    2126:	2c f4       	brge	.+10     	; 0x2132 <GPIO_setupPortDirection+0x3e>
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	61 f0       	breq	.+24     	; 0x2148 <GPIO_setupPortDirection+0x54>
    2130:	1e c0       	rjmp	.+60     	; 0x216e <GPIO_setupPortDirection+0x7a>
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	81 f0       	breq	.+32     	; 0x215c <GPIO_setupPortDirection+0x68>
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	83 30       	cpi	r24, 0x03	; 3
    2142:	91 05       	cpc	r25, r1
    2144:	81 f0       	breq	.+32     	; 0x2166 <GPIO_setupPortDirection+0x72>
    2146:	13 c0       	rjmp	.+38     	; 0x216e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2148:	ea e3       	ldi	r30, 0x3A	; 58
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	80 83       	st	Z, r24
    2150:	0e c0       	rjmp	.+28     	; 0x216e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2152:	e7 e3       	ldi	r30, 0x37	; 55
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	80 83       	st	Z, r24
    215a:	09 c0       	rjmp	.+18     	; 0x216e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    215c:	e4 e3       	ldi	r30, 0x34	; 52
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	80 83       	st	Z, r24
    2164:	04 c0       	rjmp	.+8      	; 0x216e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2166:	e1 e3       	ldi	r30, 0x31	; 49
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	80 83       	st	Z, r24
			break;
		}
	}
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <GPIO_writePort+0x6>
    2182:	00 d0       	rcall	.+0      	; 0x2184 <GPIO_writePort+0x8>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	84 30       	cpi	r24, 0x04	; 4
    2190:	90 f5       	brcc	.+100    	; 0x21f6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	3c 83       	std	Y+4, r19	; 0x04
    219a:	2b 83       	std	Y+3, r18	; 0x03
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	91 05       	cpc	r25, r1
    21a4:	d1 f0       	breq	.+52     	; 0x21da <GPIO_writePort+0x5e>
    21a6:	2b 81       	ldd	r18, Y+3	; 0x03
    21a8:	3c 81       	ldd	r19, Y+4	; 0x04
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	2c f4       	brge	.+10     	; 0x21ba <GPIO_writePort+0x3e>
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	61 f0       	breq	.+24     	; 0x21d0 <GPIO_writePort+0x54>
    21b8:	1e c0       	rjmp	.+60     	; 0x21f6 <GPIO_writePort+0x7a>
    21ba:	2b 81       	ldd	r18, Y+3	; 0x03
    21bc:	3c 81       	ldd	r19, Y+4	; 0x04
    21be:	22 30       	cpi	r18, 0x02	; 2
    21c0:	31 05       	cpc	r19, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <GPIO_writePort+0x68>
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	83 30       	cpi	r24, 0x03	; 3
    21ca:	91 05       	cpc	r25, r1
    21cc:	81 f0       	breq	.+32     	; 0x21ee <GPIO_writePort+0x72>
    21ce:	13 c0       	rjmp	.+38     	; 0x21f6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21d0:	eb e3       	ldi	r30, 0x3B	; 59
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	80 83       	st	Z, r24
    21d8:	0e c0       	rjmp	.+28     	; 0x21f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21da:	e8 e3       	ldi	r30, 0x38	; 56
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 83       	st	Z, r24
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21e4:	e5 e3       	ldi	r30, 0x35	; 53
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 83       	st	Z, r24
    21ec:	04 c0       	rjmp	.+8      	; 0x21f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21ee:	e2 e3       	ldi	r30, 0x32	; 50
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <GPIO_readPort+0x6>
    220a:	00 d0       	rcall	.+0      	; 0x220c <GPIO_readPort+0x8>
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2212:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	84 30       	cpi	r24, 0x04	; 4
    2218:	90 f5       	brcc	.+100    	; 0x227e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	3c 83       	std	Y+4, r19	; 0x04
    2222:	2b 83       	std	Y+3, r18	; 0x03
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	91 05       	cpc	r25, r1
    222c:	d1 f0       	breq	.+52     	; 0x2262 <GPIO_readPort+0x5e>
    222e:	2b 81       	ldd	r18, Y+3	; 0x03
    2230:	3c 81       	ldd	r19, Y+4	; 0x04
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	31 05       	cpc	r19, r1
    2236:	2c f4       	brge	.+10     	; 0x2242 <GPIO_readPort+0x3e>
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	61 f0       	breq	.+24     	; 0x2258 <GPIO_readPort+0x54>
    2240:	1e c0       	rjmp	.+60     	; 0x227e <GPIO_readPort+0x7a>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	81 f0       	breq	.+32     	; 0x226c <GPIO_readPort+0x68>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	91 05       	cpc	r25, r1
    2254:	81 f0       	breq	.+32     	; 0x2276 <GPIO_readPort+0x72>
    2256:	13 c0       	rjmp	.+38     	; 0x227e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2258:	e9 e3       	ldi	r30, 0x39	; 57
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	0e c0       	rjmp	.+28     	; 0x227e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2262:	e6 e3       	ldi	r30, 0x36	; 54
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	09 c0       	rjmp	.+18     	; 0x227e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    226c:	e3 e3       	ldi	r30, 0x33	; 51
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	04 c0       	rjmp	.+8      	; 0x227e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2276:	e0 e3       	ldi	r30, 0x30	; 48
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <TWI_init>:
/*
 * Description :
 * Function responsible for Init-ialize the TWI device with configuration from structure
 */
void TWI_init(const TWI_ConfigType * TWI_Config_Ptr)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <TWI_init+0x6>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    /*Bit Rate Register*/
	TWBR = TWI_Config_Ptr->Bit_Rate;
    229c:	a0 e2       	ldi	r26, 0x20	; 32
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e9 81       	ldd	r30, Y+1	; 0x01
    22a2:	fa 81       	ldd	r31, Y+2	; 0x02
    22a4:	80 81       	ld	r24, Z
    22a6:	8c 93       	st	X, r24

	/*Setting Pre-scaler*/
	TWSR = (TWSR & 0XFC) | (TWI_Config_Ptr->Prescaler);
    22a8:	a1 e2       	ldi	r26, 0x21	; 33
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e1 e2       	ldi	r30, 0x21	; 33
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	98 2f       	mov	r25, r24
    22b4:	9c 7f       	andi	r25, 0xFC	; 252
    22b6:	e9 81       	ldd	r30, Y+1	; 0x01
    22b8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	89 2b       	or	r24, r25
    22be:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = TWI_Config_Ptr->Slave_Address;
    22c0:	a2 e2       	ldi	r26, 0x22	; 34
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e9 81       	ldd	r30, Y+1	; 0x01
    22c6:	fa 81       	ldd	r31, Y+2	; 0x02
    22c8:	81 81       	ldd	r24, Z+1	; 0x01
    22ca:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    22cc:	e6 e5       	ldi	r30, 0x56	; 86
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	84 e0       	ldi	r24, 0x04	; 4
    22d2:	80 83       	st	Z, r24
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <TWI_start>:
/*
 * Description :
 * Function responsible for Enable TWI & send start bit
 */
void TWI_start(void)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22e6:	e6 e5       	ldi	r30, 0x56	; 86
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	84 ea       	ldi	r24, 0xA4	; 164
    22ec:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22ee:	e6 e5       	ldi	r30, 0x56	; 86
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	88 23       	and	r24, r24
    22f6:	dc f7       	brge	.-10     	; 0x22ee <TWI_start+0x10>
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <TWI_stop>:
/*
 * Description :
 * Function responsible to send stop bit
 */
void TWI_stop(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2306:	e6 e5       	ldi	r30, 0x56	; 86
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	84 e9       	ldi	r24, 0x94	; 148
    230c:	80 83       	st	Z, r24
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <TWI_writeByte>:
/*
 * Description :
 * Function responsible to send data
 */
void TWI_writeByte(uint8 data)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2320:	e3 e2       	ldi	r30, 0x23	; 35
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2328:	e6 e5       	ldi	r30, 0x56	; 86
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	84 e8       	ldi	r24, 0x84	; 132
    232e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2330:	e6 e5       	ldi	r30, 0x56	; 86
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	88 23       	and	r24, r24
    2338:	dc f7       	brge	.-10     	; 0x2330 <TWI_writeByte+0x1c>
}
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <TWI_readByteWithACK>:
/*
 * Description :
 * Function responsible to receive ACK from slave after sending data
 */
uint8 TWI_readByteWithACK(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    234a:	e6 e5       	ldi	r30, 0x56	; 86
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	84 ec       	ldi	r24, 0xC4	; 196
    2350:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2352:	e6 e5       	ldi	r30, 0x56	; 86
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	88 23       	and	r24, r24
    235a:	dc f7       	brge	.-10     	; 0x2352 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    235c:	e3 e2       	ldi	r30, 0x23	; 35
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
}
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <TWI_readByteWithNACK>:
/*
 * Description :
 * Function responsible to receive NACK from slave after sending data
 */
uint8 TWI_readByteWithNACK(void)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2370:	e6 e5       	ldi	r30, 0x56	; 86
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	84 e8       	ldi	r24, 0x84	; 132
    2376:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2378:	e6 e5       	ldi	r30, 0x56	; 86
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	88 23       	and	r24, r24
    2380:	dc f7       	brge	.-10     	; 0x2378 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2382:	e3 e2       	ldi	r30, 0x23	; 35
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <TWI_getStatus>:
/*
 * Description :
 * Function responsible to get status bits
 */
uint8 TWI_getStatus(void)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2398:	e1 e2       	ldi	r30, 0x21	; 33
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	88 7f       	andi	r24, 0xF8	; 248
    23a0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * UART_Config_Ptr)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <UART_init+0x6>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <UART_init+0x8>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    23bc:	1a 82       	std	Y+2, r1	; 0x02
    23be:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    23c0:	eb e2       	ldi	r30, 0x2B	; 43
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23c8:	ea e2       	ldi	r30, 0x2A	; 42
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	88 e1       	ldi	r24, 0x18	; 24
    23ce:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    23d0:	e0 e4       	ldi	r30, 0x40	; 64
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 e8       	ldi	r24, 0x80	; 128
    23d6:	80 83       	st	Z, r24
	/*
	 * Insert required number of bit data from structure
	 */
	UCSRC = (UCSRC & 0XF9) | ((UART_Config_Ptr->Bit_Data) << 1);
    23d8:	a0 e4       	ldi	r26, 0x40	; 64
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e0 e4       	ldi	r30, 0x40	; 64
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	28 2f       	mov	r18, r24
    23e4:	29 7f       	andi	r18, 0xF9	; 249
    23e6:	eb 81       	ldd	r30, Y+3	; 0x03
    23e8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ea:	80 81       	ld	r24, Z
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 2b       	or	r24, r18
    23f6:	8c 93       	st	X, r24
	/*
	 * Insert required number of stop bit from structure
	 */
	UCSRC = (UCSRC & 0XF7) | ((UART_Config_Ptr->ST_Bit) << 3);
    23f8:	a0 e4       	ldi	r26, 0x40	; 64
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e0 e4       	ldi	r30, 0x40	; 64
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	28 2f       	mov	r18, r24
    2404:	27 7f       	andi	r18, 0xF7	; 247
    2406:	eb 81       	ldd	r30, Y+3	; 0x03
    2408:	fc 81       	ldd	r31, Y+4	; 0x04
    240a:	83 81       	ldd	r24, Z+3	; 0x03
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	82 2b       	or	r24, r18
    241e:	8c 93       	st	X, r24
	/*
	 * Insert required bit to Enable(EVEN/ODD)/Disable Parity from structure
	 */
	UCSRC = (UCSRC & 0XCF) | ((UART_Config_Ptr->Parity_En_Dis) << 4);
    2420:	a0 e4       	ldi	r26, 0x40	; 64
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e0 e4       	ldi	r30, 0x40	; 64
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	28 2f       	mov	r18, r24
    242c:	2f 7c       	andi	r18, 0xCF	; 207
    242e:	eb 81       	ldd	r30, Y+3	; 0x03
    2430:	fc 81       	ldd	r31, Y+4	; 0x04
    2432:	84 81       	ldd	r24, Z+4	; 0x04
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	82 95       	swap	r24
    243a:	92 95       	swap	r25
    243c:	90 7f       	andi	r25, 0xF0	; 240
    243e:	98 27       	eor	r25, r24
    2440:	80 7f       	andi	r24, 0xF0	; 240
    2442:	98 27       	eor	r25, r24
    2444:	82 2b       	or	r24, r18
    2446:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config_Ptr->Baud_Rate) * 8UL))) - 1);
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	81 81       	ldd	r24, Z+1	; 0x01
    244e:	92 81       	ldd	r25, Z+2	; 0x02
    2450:	cc 01       	movw	r24, r24
    2452:	a0 e0       	ldi	r26, 0x00	; 0
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	aa 1f       	adc	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	aa 1f       	adc	r26, r26
    2464:	bb 1f       	adc	r27, r27
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	aa 1f       	adc	r26, r26
    246c:	bb 1f       	adc	r27, r27
    246e:	9c 01       	movw	r18, r24
    2470:	ad 01       	movw	r20, r26
    2472:	80 e4       	ldi	r24, 0x40	; 64
    2474:	92 e4       	ldi	r25, 0x42	; 66
    2476:	af e0       	ldi	r26, 0x0F	; 15
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    2482:	da 01       	movw	r26, r20
    2484:	c9 01       	movw	r24, r18
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    248c:	e0 e4       	ldi	r30, 0x40	; 64
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	89 2f       	mov	r24, r25
    2496:	99 27       	eor	r25, r25
    2498:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    249a:	e9 e2       	ldi	r30, 0x29	; 41
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	80 83       	st	Z, r24
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <UART_sendByte>:
/*
 * Description :
 * Function responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	0f 92       	push	r0
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    24bc:	eb e2       	ldi	r30, 0x2B	; 43
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	80 72       	andi	r24, 0x20	; 32
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	b9 f3       	breq	.-18     	; 0x24bc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24ce:	ec e2       	ldi	r30, 0x2C	; 44
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	80 83       	st	Z, r24
}
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <UART_recieveByte>:
/*
 * Description :
 * Function responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24e6:	eb e2       	ldi	r30, 0x2B	; 43
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	88 23       	and	r24, r24
    24ee:	dc f7       	brge	.-10     	; 0x24e6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    24f0:	ec e2       	ldi	r30, 0x2C	; 44
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
}
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <UART_sendString>:
/*
 * Description :
 * Function responsible for send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <UART_sendString+0x6>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	0e c0       	rjmp	.+28     	; 0x252c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	80 81       	ld	r24, Z
    2522:	0e 94 58 12 	call	0x24b0	; 0x24b0 <UART_sendByte>
		i++;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	8f 5f       	subi	r24, 0xFF	; 255
    252a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	80 81       	ld	r24, Z
    253e:	88 23       	and	r24, r24
    2540:	39 f7       	brne	.-50     	; 0x2510 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <UART_receiveString>:
/*
 * Description :
 * Function responsible for receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <UART_receiveString+0xa>
    2558:	0f 92       	push	r0
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9b 83       	std	Y+3, r25	; 0x03
    2560:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2562:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	8c 01       	movw	r16, r24
    2570:	02 0f       	add	r16, r18
    2572:	13 1f       	adc	r17, r19
    2574:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
    2578:	f8 01       	movw	r30, r16
    257a:	80 83       	st	Z, r24
    257c:	0f c0       	rjmp	.+30     	; 0x259c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	8c 01       	movw	r16, r24
    2590:	02 0f       	add	r16, r18
    2592:	13 1f       	adc	r17, r19
    2594:	0e 94 6f 12 	call	0x24de	; 0x24de <UART_recieveByte>
    2598:	f8 01       	movw	r30, r16
    259a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	80 81       	ld	r24, Z
    25ae:	83 32       	cpi	r24, 0x23	; 35
    25b0:	31 f7       	brne	.-52     	; 0x257e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	fc 01       	movw	r30, r24
    25be:	e2 0f       	add	r30, r18
    25c0:	f3 1f       	adc	r31, r19
    25c2:	10 82       	st	Z, r1
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	08 95       	ret

000025d4 <__udivmodhi4>:
    25d4:	aa 1b       	sub	r26, r26
    25d6:	bb 1b       	sub	r27, r27
    25d8:	51 e1       	ldi	r21, 0x11	; 17
    25da:	07 c0       	rjmp	.+14     	; 0x25ea <__udivmodhi4_ep>

000025dc <__udivmodhi4_loop>:
    25dc:	aa 1f       	adc	r26, r26
    25de:	bb 1f       	adc	r27, r27
    25e0:	a6 17       	cp	r26, r22
    25e2:	b7 07       	cpc	r27, r23
    25e4:	10 f0       	brcs	.+4      	; 0x25ea <__udivmodhi4_ep>
    25e6:	a6 1b       	sub	r26, r22
    25e8:	b7 0b       	sbc	r27, r23

000025ea <__udivmodhi4_ep>:
    25ea:	88 1f       	adc	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	5a 95       	dec	r21
    25f0:	a9 f7       	brne	.-22     	; 0x25dc <__udivmodhi4_loop>
    25f2:	80 95       	com	r24
    25f4:	90 95       	com	r25
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	08 95       	ret

000025fc <__udivmodsi4>:
    25fc:	a1 e2       	ldi	r26, 0x21	; 33
    25fe:	1a 2e       	mov	r1, r26
    2600:	aa 1b       	sub	r26, r26
    2602:	bb 1b       	sub	r27, r27
    2604:	fd 01       	movw	r30, r26
    2606:	0d c0       	rjmp	.+26     	; 0x2622 <__udivmodsi4_ep>

00002608 <__udivmodsi4_loop>:
    2608:	aa 1f       	adc	r26, r26
    260a:	bb 1f       	adc	r27, r27
    260c:	ee 1f       	adc	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	a2 17       	cp	r26, r18
    2612:	b3 07       	cpc	r27, r19
    2614:	e4 07       	cpc	r30, r20
    2616:	f5 07       	cpc	r31, r21
    2618:	20 f0       	brcs	.+8      	; 0x2622 <__udivmodsi4_ep>
    261a:	a2 1b       	sub	r26, r18
    261c:	b3 0b       	sbc	r27, r19
    261e:	e4 0b       	sbc	r30, r20
    2620:	f5 0b       	sbc	r31, r21

00002622 <__udivmodsi4_ep>:
    2622:	66 1f       	adc	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	88 1f       	adc	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	1a 94       	dec	r1
    262c:	69 f7       	brne	.-38     	; 0x2608 <__udivmodsi4_loop>
    262e:	60 95       	com	r22
    2630:	70 95       	com	r23
    2632:	80 95       	com	r24
    2634:	90 95       	com	r25
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	bd 01       	movw	r22, r26
    263c:	cf 01       	movw	r24, r30
    263e:	08 95       	ret

00002640 <__prologue_saves__>:
    2640:	2f 92       	push	r2
    2642:	3f 92       	push	r3
    2644:	4f 92       	push	r4
    2646:	5f 92       	push	r5
    2648:	6f 92       	push	r6
    264a:	7f 92       	push	r7
    264c:	8f 92       	push	r8
    264e:	9f 92       	push	r9
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	cf 92       	push	r12
    2656:	df 92       	push	r13
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	ca 1b       	sub	r28, r26
    266a:	db 0b       	sbc	r29, r27
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	09 94       	ijmp

00002678 <__epilogue_restores__>:
    2678:	2a 88       	ldd	r2, Y+18	; 0x12
    267a:	39 88       	ldd	r3, Y+17	; 0x11
    267c:	48 88       	ldd	r4, Y+16	; 0x10
    267e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2680:	6e 84       	ldd	r6, Y+14	; 0x0e
    2682:	7d 84       	ldd	r7, Y+13	; 0x0d
    2684:	8c 84       	ldd	r8, Y+12	; 0x0c
    2686:	9b 84       	ldd	r9, Y+11	; 0x0b
    2688:	aa 84       	ldd	r10, Y+10	; 0x0a
    268a:	b9 84       	ldd	r11, Y+9	; 0x09
    268c:	c8 84       	ldd	r12, Y+8	; 0x08
    268e:	df 80       	ldd	r13, Y+7	; 0x07
    2690:	ee 80       	ldd	r14, Y+6	; 0x06
    2692:	fd 80       	ldd	r15, Y+5	; 0x05
    2694:	0c 81       	ldd	r16, Y+4	; 0x04
    2696:	1b 81       	ldd	r17, Y+3	; 0x03
    2698:	aa 81       	ldd	r26, Y+2	; 0x02
    269a:	b9 81       	ldd	r27, Y+1	; 0x01
    269c:	ce 0f       	add	r28, r30
    269e:	d1 1d       	adc	r29, r1
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	ed 01       	movw	r28, r26
    26ac:	08 95       	ret

000026ae <_exit>:
    26ae:	f8 94       	cli

000026b0 <__stop_program>:
    26b0:	ff cf       	rjmp	.-2      	; 0x26b0 <__stop_program>
